// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: FrecencyUserSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var versions: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions {
    get {return _versions ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions()}
    set {_versions = newValue}
  }
  /// Returns true if `versions` has been explicitly set.
  public var hasVersions: Bool {return self._versions != nil}
  /// Clears the value of `versions`. Subsequent reads from it will return its default value.
  public mutating func clearVersions() {self._versions = nil}

  public var favoriteGifs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs {
    get {return _favoriteGifs ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs()}
    set {_favoriteGifs = newValue}
  }
  /// Returns true if `favoriteGifs` has been explicitly set.
  public var hasFavoriteGifs: Bool {return self._favoriteGifs != nil}
  /// Clears the value of `favoriteGifs`. Subsequent reads from it will return its default value.
  public mutating func clearFavoriteGifs() {self._favoriteGifs = nil}

  public var favoriteStickers: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers {
    get {return _favoriteStickers ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers()}
    set {_favoriteStickers = newValue}
  }
  /// Returns true if `favoriteStickers` has been explicitly set.
  public var hasFavoriteStickers: Bool {return self._favoriteStickers != nil}
  /// Clears the value of `favoriteStickers`. Subsequent reads from it will return its default value.
  public mutating func clearFavoriteStickers() {self._favoriteStickers = nil}

  public var stickerFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency {
    get {return _stickerFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency()}
    set {_stickerFrecency = newValue}
  }
  /// Returns true if `stickerFrecency` has been explicitly set.
  public var hasStickerFrecency: Bool {return self._stickerFrecency != nil}
  /// Clears the value of `stickerFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearStickerFrecency() {self._stickerFrecency = nil}

  public var favoriteEmojis: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis {
    get {return _favoriteEmojis ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis()}
    set {_favoriteEmojis = newValue}
  }
  /// Returns true if `favoriteEmojis` has been explicitly set.
  public var hasFavoriteEmojis: Bool {return self._favoriteEmojis != nil}
  /// Clears the value of `favoriteEmojis`. Subsequent reads from it will return its default value.
  public mutating func clearFavoriteEmojis() {self._favoriteEmojis = nil}

  public var emojiFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency {
    get {return _emojiFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency()}
    set {_emojiFrecency = newValue}
  }
  /// Returns true if `emojiFrecency` has been explicitly set.
  public var hasEmojiFrecency: Bool {return self._emojiFrecency != nil}
  /// Clears the value of `emojiFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearEmojiFrecency() {self._emojiFrecency = nil}

  public var applicationCommandFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency {
    get {return _applicationCommandFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency()}
    set {_applicationCommandFrecency = newValue}
  }
  /// Returns true if `applicationCommandFrecency` has been explicitly set.
  public var hasApplicationCommandFrecency: Bool {return self._applicationCommandFrecency != nil}
  /// Clears the value of `applicationCommandFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationCommandFrecency() {self._applicationCommandFrecency = nil}

  public var favoriteSoundboardSounds: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds {
    get {return _favoriteSoundboardSounds ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds()}
    set {_favoriteSoundboardSounds = newValue}
  }
  /// Returns true if `favoriteSoundboardSounds` has been explicitly set.
  public var hasFavoriteSoundboardSounds: Bool {return self._favoriteSoundboardSounds != nil}
  /// Clears the value of `favoriteSoundboardSounds`. Subsequent reads from it will return its default value.
  public mutating func clearFavoriteSoundboardSounds() {self._favoriteSoundboardSounds = nil}

  public var applicationFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency {
    get {return _applicationFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency()}
    set {_applicationFrecency = newValue}
  }
  /// Returns true if `applicationFrecency` has been explicitly set.
  public var hasApplicationFrecency: Bool {return self._applicationFrecency != nil}
  /// Clears the value of `applicationFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationFrecency() {self._applicationFrecency = nil}

  public var heardSoundFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency {
    get {return _heardSoundFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency()}
    set {_heardSoundFrecency = newValue}
  }
  /// Returns true if `heardSoundFrecency` has been explicitly set.
  public var hasHeardSoundFrecency: Bool {return self._heardSoundFrecency != nil}
  /// Clears the value of `heardSoundFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearHeardSoundFrecency() {self._heardSoundFrecency = nil}

  public var playedSoundFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency {
    get {return _playedSoundFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency()}
    set {_playedSoundFrecency = newValue}
  }
  /// Returns true if `playedSoundFrecency` has been explicitly set.
  public var hasPlayedSoundFrecency: Bool {return self._playedSoundFrecency != nil}
  /// Clears the value of `playedSoundFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearPlayedSoundFrecency() {self._playedSoundFrecency = nil}

  public var guildAndChannelFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency {
    get {return _guildAndChannelFrecency ?? DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency()}
    set {_guildAndChannelFrecency = newValue}
  }
  /// Returns true if `guildAndChannelFrecency` has been explicitly set.
  public var hasGuildAndChannelFrecency: Bool {return self._guildAndChannelFrecency != nil}
  /// Clears the value of `guildAndChannelFrecency`. Subsequent reads from it will return its default value.
  public mutating func clearGuildAndChannelFrecency() {self._guildAndChannelFrecency = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum GIFType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case image // = 1
    case video // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .image
      case 2: self = .video
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .image: return 1
      case .video: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Versions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var clientVersion: UInt32 = 0

    public var serverVersion: UInt32 = 0

    public var dataVersion: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteGIF {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var format: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GIFType = .none

    public var src: String = String()

    public var width: UInt32 = 0

    public var height: UInt32 = 0

    public var order: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteGIFs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var gifs: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF> = [:]

    public var hideTooltip: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteStickers {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var stickerIds: [UInt64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FrecencyItem {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var totalUses: UInt32 = 0

    public var recentUses: [UInt64] = []

    public var frecency: Int32 = 0

    public var score: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StickerFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var stickers: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteEmojis {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var emojis: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct EmojiFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var emojis: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ApplicationCommandFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var applicationCommands: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteSoundboardSounds {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var soundIds: [UInt64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ApplicationFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var applications: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct HeardSoundFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var heardSounds: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct PlayedSoundFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var playedSounds: Dictionary<String,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct GuildAndChannelFrecency {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var guildAndChannels: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _versions: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions? = nil
  fileprivate var _favoriteGifs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs? = nil
  fileprivate var _favoriteStickers: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers? = nil
  fileprivate var _stickerFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency? = nil
  fileprivate var _favoriteEmojis: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis? = nil
  fileprivate var _emojiFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency? = nil
  fileprivate var _applicationCommandFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency? = nil
  fileprivate var _favoriteSoundboardSounds: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds? = nil
  fileprivate var _applicationFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency? = nil
  fileprivate var _heardSoundFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency? = nil
  fileprivate var _playedSoundFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency? = nil
  fileprivate var _guildAndChannelFrecency: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency? = nil
}

#if swift(>=4.2)

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GIFType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GIFType] = [
    .none,
    .image,
    .video,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GIFType: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "discord_protos.discord_users.v1.FrecencyUserSettings"

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrecencyUserSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "versions"),
    2: .standard(proto: "favorite_gifs"),
    3: .standard(proto: "favorite_stickers"),
    4: .standard(proto: "sticker_frecency"),
    5: .standard(proto: "favorite_emojis"),
    6: .standard(proto: "emoji_frecency"),
    7: .standard(proto: "application_command_frecency"),
    8: .standard(proto: "favorite_soundboard_sounds"),
    9: .standard(proto: "application_frecency"),
    10: .standard(proto: "heard_sound_frecency"),
    11: .standard(proto: "played_sound_frecency"),
    12: .standard(proto: "guild_and_channel_frecency"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._versions) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._favoriteGifs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._favoriteStickers) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._stickerFrecency) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._favoriteEmojis) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._emojiFrecency) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._applicationCommandFrecency) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._favoriteSoundboardSounds) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._applicationFrecency) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._heardSoundFrecency) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._playedSoundFrecency) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._guildAndChannelFrecency) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._versions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._favoriteGifs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._favoriteStickers {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._stickerFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._favoriteEmojis {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._emojiFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._applicationCommandFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._favoriteSoundboardSounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._applicationFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._heardSoundFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._playedSoundFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._guildAndChannelFrecency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings) -> Bool {
    if lhs._versions != rhs._versions {return false}
    if lhs._favoriteGifs != rhs._favoriteGifs {return false}
    if lhs._favoriteStickers != rhs._favoriteStickers {return false}
    if lhs._stickerFrecency != rhs._stickerFrecency {return false}
    if lhs._favoriteEmojis != rhs._favoriteEmojis {return false}
    if lhs._emojiFrecency != rhs._emojiFrecency {return false}
    if lhs._applicationCommandFrecency != rhs._applicationCommandFrecency {return false}
    if lhs._favoriteSoundboardSounds != rhs._favoriteSoundboardSounds {return false}
    if lhs._applicationFrecency != rhs._applicationFrecency {return false}
    if lhs._heardSoundFrecency != rhs._heardSoundFrecency {return false}
    if lhs._playedSoundFrecency != rhs._playedSoundFrecency {return false}
    if lhs._guildAndChannelFrecency != rhs._guildAndChannelFrecency {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GIFType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "IMAGE"),
    2: .same(proto: "VIDEO"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".Versions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_version"),
    2: .standard(proto: "server_version"),
    3: .standard(proto: "data_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.clientVersion) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.serverVersion) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.dataVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.clientVersion, fieldNumber: 1)
    }
    if self.serverVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.serverVersion, fieldNumber: 2)
    }
    if self.dataVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.Versions) -> Bool {
    if lhs.clientVersion != rhs.clientVersion {return false}
    if lhs.serverVersion != rhs.serverVersion {return false}
    if lhs.dataVersion != rhs.dataVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FavoriteGIF"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "format"),
    2: .same(proto: "src"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
    5: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.format) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.src) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.format != .none {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 1)
    }
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 4)
    }
    if self.order != 0 {
      try visitor.visitSingularUInt32Field(value: self.order, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF) -> Bool {
    if lhs.format != rhs.format {return false}
    if lhs.src != rhs.src {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FavoriteGIFs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gifs"),
    2: .standard(proto: "hide_tooltip"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF>.self, value: &self.gifs) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hideTooltip) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gifs.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIF>.self, value: self.gifs, fieldNumber: 1)
    }
    if self.hideTooltip != false {
      try visitor.visitSingularBoolField(value: self.hideTooltip, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteGIFs) -> Bool {
    if lhs.gifs != rhs.gifs {return false}
    if lhs.hideTooltip != rhs.hideTooltip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FavoriteStickers"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sticker_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFixed64Field(value: &self.stickerIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stickerIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.stickerIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteStickers) -> Bool {
    if lhs.stickerIds != rhs.stickerIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FrecencyItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "total_uses"),
    2: .standard(proto: "recent_uses"),
    3: .same(proto: "frecency"),
    4: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.totalUses) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.recentUses) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.frecency) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalUses != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalUses, fieldNumber: 1)
    }
    if !self.recentUses.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.recentUses, fieldNumber: 2)
    }
    if self.frecency != 0 {
      try visitor.visitSingularInt32Field(value: self.frecency, fieldNumber: 3)
    }
    if self.score != 0 {
      try visitor.visitSingularInt32Field(value: self.score, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem) -> Bool {
    if lhs.totalUses != rhs.totalUses {return false}
    if lhs.recentUses != rhs.recentUses {return false}
    if lhs.frecency != rhs.frecency {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".StickerFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stickers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.stickers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stickers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.stickers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.StickerFrecency) -> Bool {
    if lhs.stickers != rhs.stickers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FavoriteEmojis"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emojis"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.emojis) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emojis.isEmpty {
      try visitor.visitRepeatedStringField(value: self.emojis, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteEmojis) -> Bool {
    if lhs.emojis != rhs.emojis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".EmojiFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "emojis"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.emojis) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.emojis.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.emojis, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.EmojiFrecency) -> Bool {
    if lhs.emojis != rhs.emojis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".ApplicationCommandFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "application_commands"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.applicationCommands) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.applicationCommands.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.applicationCommands, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationCommandFrecency) -> Bool {
    if lhs.applicationCommands != rhs.applicationCommands {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".FavoriteSoundboardSounds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sound_ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFixed64Field(value: &self.soundIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.soundIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.soundIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FavoriteSoundboardSounds) -> Bool {
    if lhs.soundIds != rhs.soundIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".ApplicationFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "applications"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.applications) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.applications.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.applications, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.ApplicationFrecency) -> Bool {
    if lhs.applications != rhs.applications {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".HeardSoundFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "heard_sounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.heardSounds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.heardSounds.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.heardSounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.HeardSoundFrecency) -> Bool {
    if lhs.heardSounds != rhs.heardSounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".PlayedSoundFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "played_sounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.playedSounds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playedSounds.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.playedSounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.PlayedSoundFrecency) -> Bool {
    if lhs.playedSounds != rhs.playedSounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.protoMessageName + ".GuildAndChannelFrecency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "guild_and_channels"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: &self.guildAndChannels) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.guildAndChannels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.FrecencyItem>.self, value: self.guildAndChannels, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency, rhs: DiscordProtos_DiscordUsers_V1_FrecencyUserSettings_FrecencyUserSettings.GuildAndChannelFrecency) -> Bool {
    if lhs.guildAndChannels != rhs.guildAndChannels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
