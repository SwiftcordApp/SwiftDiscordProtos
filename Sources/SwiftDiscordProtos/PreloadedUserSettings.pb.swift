// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PreloadedUserSettings.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var versions: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions {
    get {return _storage._versions ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions()}
    set {_uniqueStorage()._versions = newValue}
  }
  /// Returns true if `versions` has been explicitly set.
  public var hasVersions: Bool {return _storage._versions != nil}
  /// Clears the value of `versions`. Subsequent reads from it will return its default value.
  public mutating func clearVersions() {_uniqueStorage()._versions = nil}

  public var inbox: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings {
    get {return _storage._inbox ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings()}
    set {_uniqueStorage()._inbox = newValue}
  }
  /// Returns true if `inbox` has been explicitly set.
  public var hasInbox: Bool {return _storage._inbox != nil}
  /// Clears the value of `inbox`. Subsequent reads from it will return its default value.
  public mutating func clearInbox() {_uniqueStorage()._inbox = nil}

  public var guilds: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings {
    get {return _storage._guilds ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings()}
    set {_uniqueStorage()._guilds = newValue}
  }
  /// Returns true if `guilds` has been explicitly set.
  public var hasGuilds: Bool {return _storage._guilds != nil}
  /// Clears the value of `guilds`. Subsequent reads from it will return its default value.
  public mutating func clearGuilds() {_uniqueStorage()._guilds = nil}

  public var userContent: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings {
    get {return _storage._userContent ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings()}
    set {_uniqueStorage()._userContent = newValue}
  }
  /// Returns true if `userContent` has been explicitly set.
  public var hasUserContent: Bool {return _storage._userContent != nil}
  /// Clears the value of `userContent`. Subsequent reads from it will return its default value.
  public mutating func clearUserContent() {_uniqueStorage()._userContent = nil}

  public var voiceAndVideo: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings {
    get {return _storage._voiceAndVideo ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings()}
    set {_uniqueStorage()._voiceAndVideo = newValue}
  }
  /// Returns true if `voiceAndVideo` has been explicitly set.
  public var hasVoiceAndVideo: Bool {return _storage._voiceAndVideo != nil}
  /// Clears the value of `voiceAndVideo`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceAndVideo() {_uniqueStorage()._voiceAndVideo = nil}

  public var textAndImages: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings {
    get {return _storage._textAndImages ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings()}
    set {_uniqueStorage()._textAndImages = newValue}
  }
  /// Returns true if `textAndImages` has been explicitly set.
  public var hasTextAndImages: Bool {return _storage._textAndImages != nil}
  /// Clears the value of `textAndImages`. Subsequent reads from it will return its default value.
  public mutating func clearTextAndImages() {_uniqueStorage()._textAndImages = nil}

  public var notifications: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings {
    get {return _storage._notifications ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings()}
    set {_uniqueStorage()._notifications = newValue}
  }
  /// Returns true if `notifications` has been explicitly set.
  public var hasNotifications: Bool {return _storage._notifications != nil}
  /// Clears the value of `notifications`. Subsequent reads from it will return its default value.
  public mutating func clearNotifications() {_uniqueStorage()._notifications = nil}

  public var privacy: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings {
    get {return _storage._privacy ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings()}
    set {_uniqueStorage()._privacy = newValue}
  }
  /// Returns true if `privacy` has been explicitly set.
  public var hasPrivacy: Bool {return _storage._privacy != nil}
  /// Clears the value of `privacy`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacy() {_uniqueStorage()._privacy = nil}

  public var debug: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings {
    get {return _storage._debug ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings()}
    set {_uniqueStorage()._debug = newValue}
  }
  /// Returns true if `debug` has been explicitly set.
  public var hasDebug: Bool {return _storage._debug != nil}
  /// Clears the value of `debug`. Subsequent reads from it will return its default value.
  public mutating func clearDebug() {_uniqueStorage()._debug = nil}

  public var gameLibrary: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings {
    get {return _storage._gameLibrary ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings()}
    set {_uniqueStorage()._gameLibrary = newValue}
  }
  /// Returns true if `gameLibrary` has been explicitly set.
  public var hasGameLibrary: Bool {return _storage._gameLibrary != nil}
  /// Clears the value of `gameLibrary`. Subsequent reads from it will return its default value.
  public mutating func clearGameLibrary() {_uniqueStorage()._gameLibrary = nil}

  public var status: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings {
    get {return _storage._status ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var localization: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings {
    get {return _storage._localization ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings()}
    set {_uniqueStorage()._localization = newValue}
  }
  /// Returns true if `localization` has been explicitly set.
  public var hasLocalization: Bool {return _storage._localization != nil}
  /// Clears the value of `localization`. Subsequent reads from it will return its default value.
  public mutating func clearLocalization() {_uniqueStorage()._localization = nil}

  public var appearance: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings {
    get {return _storage._appearance ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings()}
    set {_uniqueStorage()._appearance = newValue}
  }
  /// Returns true if `appearance` has been explicitly set.
  public var hasAppearance: Bool {return _storage._appearance != nil}
  /// Clears the value of `appearance`. Subsequent reads from it will return its default value.
  public mutating func clearAppearance() {_uniqueStorage()._appearance = nil}

  public var guildFolders: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders {
    get {return _storage._guildFolders ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders()}
    set {_uniqueStorage()._guildFolders = newValue}
  }
  /// Returns true if `guildFolders` has been explicitly set.
  public var hasGuildFolders: Bool {return _storage._guildFolders != nil}
  /// Clears the value of `guildFolders`. Subsequent reads from it will return its default value.
  public mutating func clearGuildFolders() {_uniqueStorage()._guildFolders = nil}

  public var favorites: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites {
    get {return _storage._favorites ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites()}
    set {_uniqueStorage()._favorites = newValue}
  }
  /// Returns true if `favorites` has been explicitly set.
  public var hasFavorites: Bool {return _storage._favorites != nil}
  /// Clears the value of `favorites`. Subsequent reads from it will return its default value.
  public mutating func clearFavorites() {_uniqueStorage()._favorites = nil}

  public var audioContextSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings {
    get {return _storage._audioContextSettings ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings()}
    set {_uniqueStorage()._audioContextSettings = newValue}
  }
  /// Returns true if `audioContextSettings` has been explicitly set.
  public var hasAudioContextSettings: Bool {return _storage._audioContextSettings != nil}
  /// Clears the value of `audioContextSettings`. Subsequent reads from it will return its default value.
  public mutating func clearAudioContextSettings() {_uniqueStorage()._audioContextSettings = nil}

  public var communities: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings {
    get {return _storage._communities ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings()}
    set {_uniqueStorage()._communities = newValue}
  }
  /// Returns true if `communities` has been explicitly set.
  public var hasCommunities: Bool {return _storage._communities != nil}
  /// Clears the value of `communities`. Subsequent reads from it will return its default value.
  public mutating func clearCommunities() {_uniqueStorage()._communities = nil}

  public var broadcast: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings {
    get {return _storage._broadcast ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings()}
    set {_uniqueStorage()._broadcast = newValue}
  }
  /// Returns true if `broadcast` has been explicitly set.
  public var hasBroadcast: Bool {return _storage._broadcast != nil}
  /// Clears the value of `broadcast`. Subsequent reads from it will return its default value.
  public mutating func clearBroadcast() {_uniqueStorage()._broadcast = nil}

  public var clips: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings {
    get {return _storage._clips ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings()}
    set {_uniqueStorage()._clips = newValue}
  }
  /// Returns true if `clips` has been explicitly set.
  public var hasClips: Bool {return _storage._clips != nil}
  /// Clears the value of `clips`. Subsequent reads from it will return its default value.
  public mutating func clearClips() {_uniqueStorage()._clips = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum InboxTab: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case mentions // = 1
    case unreads // = 2
    case todos // = 3
    case forYou // = 4
    case gameInvites // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .mentions
      case 2: self = .unreads
      case 3: self = .todos
      case 4: self = .forYou
      case 5: self = .gameInvites
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .mentions: return 1
      case .unreads: return 2
      case .todos: return 3
      case .forYou: return 4
      case .gameInvites: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum DmSpamFilterV2: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case defaultUnset // = 0
    case disabled // = 1
    case nonFriends // = 2
    case friendsAndNonFriends // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .defaultUnset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .defaultUnset
      case 1: self = .disabled
      case 2: self = .nonFriends
      case 3: self = .friendsAndNonFriends
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .defaultUnset: return 0
      case .disabled: return 1
      case .nonFriends: return 2
      case .friendsAndNonFriends: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum ExplicitContentRedaction: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsetExplicitContentRedaction // = 0
    case show // = 1
    case blur // = 2
    case block // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsetExplicitContentRedaction
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsetExplicitContentRedaction
      case 1: self = .show
      case 2: self = .blur
      case 3: self = .block
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsetExplicitContentRedaction: return 0
      case .show: return 1
      case .blur: return 2
      case .block: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum GuildActivityStatusRestrictionDefault: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case off // = 0
    case onForLargeGuilds // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .off
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .off
      case 1: self = .onForLargeGuilds
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .off: return 0
      case .onForLargeGuilds: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Theme: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unset // = 0
    case dark // = 1
    case light // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unset
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unset
      case 1: self = .dark
      case 2: self = .light
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unset: return 0
      case .dark: return 1
      case .light: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum FavoriteChannelType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unsetFavoriteChannelType // = 0
    case referenceOriginal // = 1
    case category // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unsetFavoriteChannelType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unsetFavoriteChannelType
      case 1: self = .referenceOriginal
      case 2: self = .category
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unsetFavoriteChannelType: return 0
      case .referenceOriginal: return 1
      case .category: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Versions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var clientVersion: UInt32 = 0

    public var serverVersion: UInt32 = 0

    public var dataVersion: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct InboxSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var currentTab: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxTab = .unspecified

    public var viewedTutorial: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ChannelIconEmoji {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: SwiftProtobuf.Google_Protobuf_UInt64Value {
      get {return _id ?? SwiftProtobuf.Google_Protobuf_UInt64Value()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() {self._id = nil}

    public var name: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() {self._name = nil}

    public var color: SwiftProtobuf.Google_Protobuf_UInt64Value {
      get {return _color ?? SwiftProtobuf.Google_Protobuf_UInt64Value()}
      set {_color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    public var hasColor: Bool {return self._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    public mutating func clearColor() {self._color = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: SwiftProtobuf.Google_Protobuf_UInt64Value? = nil
    fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _color: SwiftProtobuf.Google_Protobuf_UInt64Value? = nil
  }

  public struct ChannelSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var collapsedInInbox: Bool = false

    public var iconEmoji: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji {
      get {return _iconEmoji ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji()}
      set {_iconEmoji = newValue}
    }
    /// Returns true if `iconEmoji` has been explicitly set.
    public var hasIconEmoji: Bool {return self._iconEmoji != nil}
    /// Clears the value of `iconEmoji`. Subsequent reads from it will return its default value.
    public mutating func clearIconEmoji() {self._iconEmoji = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _iconEmoji: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji? = nil
  }

  public struct CustomCallSound {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var soundID: UInt64 = 0

    public var guildID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ChannelListSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var layout: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _layout ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_layout = newValue}
    }
    /// Returns true if `layout` has been explicitly set.
    public var hasLayout: Bool {return self._layout != nil}
    /// Clears the value of `layout`. Subsequent reads from it will return its default value.
    public mutating func clearLayout() {self._layout = nil}

    public var messagePreviews: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _messagePreviews ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_messagePreviews = newValue}
    }
    /// Returns true if `messagePreviews` has been explicitly set.
    public var hasMessagePreviews: Bool {return self._messagePreviews != nil}
    /// Clears the value of `messagePreviews`. Subsequent reads from it will return its default value.
    public mutating func clearMessagePreviews() {self._messagePreviews = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _layout: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _messagePreviews: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  }

  public struct GuildSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var channels: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings> = [:]

    public var hubProgress: UInt32 = 0

    public var guildOnboardingProgress: UInt32 = 0

    public var guildRecentsDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _guildRecentsDismissedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_guildRecentsDismissedAt = newValue}
    }
    /// Returns true if `guildRecentsDismissedAt` has been explicitly set.
    public var hasGuildRecentsDismissedAt: Bool {return self._guildRecentsDismissedAt != nil}
    /// Clears the value of `guildRecentsDismissedAt`. Subsequent reads from it will return its default value.
    public mutating func clearGuildRecentsDismissedAt() {self._guildRecentsDismissedAt = nil}

    public var dismissedGuildContent: Data = Data()

    public var joinSound: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound {
      get {return _joinSound ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound()}
      set {_joinSound = newValue}
    }
    /// Returns true if `joinSound` has been explicitly set.
    public var hasJoinSound: Bool {return self._joinSound != nil}
    /// Clears the value of `joinSound`. Subsequent reads from it will return its default value.
    public mutating func clearJoinSound() {self._joinSound = nil}

    public var mobileRedesignChannelListSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings {
      get {return _mobileRedesignChannelListSettings ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings()}
      set {_mobileRedesignChannelListSettings = newValue}
    }
    /// Returns true if `mobileRedesignChannelListSettings` has been explicitly set.
    public var hasMobileRedesignChannelListSettings: Bool {return self._mobileRedesignChannelListSettings != nil}
    /// Clears the value of `mobileRedesignChannelListSettings`. Subsequent reads from it will return its default value.
    public mutating func clearMobileRedesignChannelListSettings() {self._mobileRedesignChannelListSettings = nil}

    public var disableRaidAlertPush: Bool = false

    public var disableRaidAlertNag: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _guildRecentsDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _joinSound: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound? = nil
    fileprivate var _mobileRedesignChannelListSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings? = nil
  }

  public struct AllGuildSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var guilds: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct UserContentSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var dismissedContents: Data = Data()

    public var lastDismissedOutboundPromotionStartDate: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _lastDismissedOutboundPromotionStartDate ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_lastDismissedOutboundPromotionStartDate = newValue}
    }
    /// Returns true if `lastDismissedOutboundPromotionStartDate` has been explicitly set.
    public var hasLastDismissedOutboundPromotionStartDate: Bool {return self._lastDismissedOutboundPromotionStartDate != nil}
    /// Clears the value of `lastDismissedOutboundPromotionStartDate`. Subsequent reads from it will return its default value.
    public mutating func clearLastDismissedOutboundPromotionStartDate() {self._lastDismissedOutboundPromotionStartDate = nil}

    public var premiumTier0ModalDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _premiumTier0ModalDismissedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_premiumTier0ModalDismissedAt = newValue}
    }
    /// Returns true if `premiumTier0ModalDismissedAt` has been explicitly set.
    public var hasPremiumTier0ModalDismissedAt: Bool {return self._premiumTier0ModalDismissedAt != nil}
    /// Clears the value of `premiumTier0ModalDismissedAt`. Subsequent reads from it will return its default value.
    public mutating func clearPremiumTier0ModalDismissedAt() {self._premiumTier0ModalDismissedAt = nil}

    public var guildOnboardingUpsellDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _guildOnboardingUpsellDismissedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_guildOnboardingUpsellDismissedAt = newValue}
    }
    /// Returns true if `guildOnboardingUpsellDismissedAt` has been explicitly set.
    public var hasGuildOnboardingUpsellDismissedAt: Bool {return self._guildOnboardingUpsellDismissedAt != nil}
    /// Clears the value of `guildOnboardingUpsellDismissedAt`. Subsequent reads from it will return its default value.
    public mutating func clearGuildOnboardingUpsellDismissedAt() {self._guildOnboardingUpsellDismissedAt = nil}

    public var safetyUserSentimentNoticeDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _safetyUserSentimentNoticeDismissedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_safetyUserSentimentNoticeDismissedAt = newValue}
    }
    /// Returns true if `safetyUserSentimentNoticeDismissedAt` has been explicitly set.
    public var hasSafetyUserSentimentNoticeDismissedAt: Bool {return self._safetyUserSentimentNoticeDismissedAt != nil}
    /// Clears the value of `safetyUserSentimentNoticeDismissedAt`. Subsequent reads from it will return its default value.
    public mutating func clearSafetyUserSentimentNoticeDismissedAt() {self._safetyUserSentimentNoticeDismissedAt = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _lastDismissedOutboundPromotionStartDate: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _premiumTier0ModalDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _guildOnboardingUpsellDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    fileprivate var _safetyUserSentimentNoticeDismissedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  public struct VideoFilterBackgroundBlur {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var useBlur: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct VideoFilterAsset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: UInt64 = 0

    public var assetHash: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SoundboardSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var volume: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct VoiceAndVideoSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var blur: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur {
      get {return _blur ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur()}
      set {_blur = newValue}
    }
    /// Returns true if `blur` has been explicitly set.
    public var hasBlur: Bool {return self._blur != nil}
    /// Clears the value of `blur`. Subsequent reads from it will return its default value.
    public mutating func clearBlur() {self._blur = nil}

    public var presetOption: UInt32 = 0

    public var customAsset: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset {
      get {return _customAsset ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset()}
      set {_customAsset = newValue}
    }
    /// Returns true if `customAsset` has been explicitly set.
    public var hasCustomAsset: Bool {return self._customAsset != nil}
    /// Clears the value of `customAsset`. Subsequent reads from it will return its default value.
    public mutating func clearCustomAsset() {self._customAsset = nil}

    public var alwaysPreviewVideo: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _alwaysPreviewVideo ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_alwaysPreviewVideo = newValue}
    }
    /// Returns true if `alwaysPreviewVideo` has been explicitly set.
    public var hasAlwaysPreviewVideo: Bool {return self._alwaysPreviewVideo != nil}
    /// Clears the value of `alwaysPreviewVideo`. Subsequent reads from it will return its default value.
    public mutating func clearAlwaysPreviewVideo() {self._alwaysPreviewVideo = nil}

    public var afkTimeout: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _afkTimeout ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_afkTimeout = newValue}
    }
    /// Returns true if `afkTimeout` has been explicitly set.
    public var hasAfkTimeout: Bool {return self._afkTimeout != nil}
    /// Clears the value of `afkTimeout`. Subsequent reads from it will return its default value.
    public mutating func clearAfkTimeout() {self._afkTimeout = nil}

    public var streamNotificationsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _streamNotificationsEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_streamNotificationsEnabled = newValue}
    }
    /// Returns true if `streamNotificationsEnabled` has been explicitly set.
    public var hasStreamNotificationsEnabled: Bool {return self._streamNotificationsEnabled != nil}
    /// Clears the value of `streamNotificationsEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearStreamNotificationsEnabled() {self._streamNotificationsEnabled = nil}

    public var nativePhoneIntegrationEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _nativePhoneIntegrationEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_nativePhoneIntegrationEnabled = newValue}
    }
    /// Returns true if `nativePhoneIntegrationEnabled` has been explicitly set.
    public var hasNativePhoneIntegrationEnabled: Bool {return self._nativePhoneIntegrationEnabled != nil}
    /// Clears the value of `nativePhoneIntegrationEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearNativePhoneIntegrationEnabled() {self._nativePhoneIntegrationEnabled = nil}

    public var soundboardSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings {
      get {return _soundboardSettings ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings()}
      set {_soundboardSettings = newValue}
    }
    /// Returns true if `soundboardSettings` has been explicitly set.
    public var hasSoundboardSettings: Bool {return self._soundboardSettings != nil}
    /// Clears the value of `soundboardSettings`. Subsequent reads from it will return its default value.
    public mutating func clearSoundboardSettings() {self._soundboardSettings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _blur: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur? = nil
    fileprivate var _customAsset: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset? = nil
    fileprivate var _alwaysPreviewVideo: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _afkTimeout: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    fileprivate var _streamNotificationsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _nativePhoneIntegrationEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _soundboardSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings? = nil
  }

  public struct ExplicitContentSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var explicitContentGuilds: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction = .unsetExplicitContentRedaction

    public var explicitContentFriendDm: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction = .unsetExplicitContentRedaction

    public var explicitContentNonFriendDm: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction = .unsetExplicitContentRedaction

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct TextAndImagesSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var diversitySurrogate: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _storage._diversitySurrogate ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_uniqueStorage()._diversitySurrogate = newValue}
    }
    /// Returns true if `diversitySurrogate` has been explicitly set.
    public var hasDiversitySurrogate: Bool {return _storage._diversitySurrogate != nil}
    /// Clears the value of `diversitySurrogate`. Subsequent reads from it will return its default value.
    public mutating func clearDiversitySurrogate() {_uniqueStorage()._diversitySurrogate = nil}

    public var useRichChatInput: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._useRichChatInput ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._useRichChatInput = newValue}
    }
    /// Returns true if `useRichChatInput` has been explicitly set.
    public var hasUseRichChatInput: Bool {return _storage._useRichChatInput != nil}
    /// Clears the value of `useRichChatInput`. Subsequent reads from it will return its default value.
    public mutating func clearUseRichChatInput() {_uniqueStorage()._useRichChatInput = nil}

    public var useThreadSidebar: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._useThreadSidebar ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._useThreadSidebar = newValue}
    }
    /// Returns true if `useThreadSidebar` has been explicitly set.
    public var hasUseThreadSidebar: Bool {return _storage._useThreadSidebar != nil}
    /// Clears the value of `useThreadSidebar`. Subsequent reads from it will return its default value.
    public mutating func clearUseThreadSidebar() {_uniqueStorage()._useThreadSidebar = nil}

    public var renderSpoilers: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _storage._renderSpoilers ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_uniqueStorage()._renderSpoilers = newValue}
    }
    /// Returns true if `renderSpoilers` has been explicitly set.
    public var hasRenderSpoilers: Bool {return _storage._renderSpoilers != nil}
    /// Clears the value of `renderSpoilers`. Subsequent reads from it will return its default value.
    public mutating func clearRenderSpoilers() {_uniqueStorage()._renderSpoilers = nil}

    public var emojiPickerCollapsedSections: [String] {
      get {return _storage._emojiPickerCollapsedSections}
      set {_uniqueStorage()._emojiPickerCollapsedSections = newValue}
    }

    public var stickerPickerCollapsedSections: [String] {
      get {return _storage._stickerPickerCollapsedSections}
      set {_uniqueStorage()._stickerPickerCollapsedSections = newValue}
    }

    public var viewImageDescriptions: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._viewImageDescriptions ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._viewImageDescriptions = newValue}
    }
    /// Returns true if `viewImageDescriptions` has been explicitly set.
    public var hasViewImageDescriptions: Bool {return _storage._viewImageDescriptions != nil}
    /// Clears the value of `viewImageDescriptions`. Subsequent reads from it will return its default value.
    public mutating func clearViewImageDescriptions() {_uniqueStorage()._viewImageDescriptions = nil}

    public var showCommandSuggestions: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._showCommandSuggestions ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._showCommandSuggestions = newValue}
    }
    /// Returns true if `showCommandSuggestions` has been explicitly set.
    public var hasShowCommandSuggestions: Bool {return _storage._showCommandSuggestions != nil}
    /// Clears the value of `showCommandSuggestions`. Subsequent reads from it will return its default value.
    public mutating func clearShowCommandSuggestions() {_uniqueStorage()._showCommandSuggestions = nil}

    public var inlineAttachmentMedia: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._inlineAttachmentMedia ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._inlineAttachmentMedia = newValue}
    }
    /// Returns true if `inlineAttachmentMedia` has been explicitly set.
    public var hasInlineAttachmentMedia: Bool {return _storage._inlineAttachmentMedia != nil}
    /// Clears the value of `inlineAttachmentMedia`. Subsequent reads from it will return its default value.
    public mutating func clearInlineAttachmentMedia() {_uniqueStorage()._inlineAttachmentMedia = nil}

    public var inlineEmbedMedia: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._inlineEmbedMedia ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._inlineEmbedMedia = newValue}
    }
    /// Returns true if `inlineEmbedMedia` has been explicitly set.
    public var hasInlineEmbedMedia: Bool {return _storage._inlineEmbedMedia != nil}
    /// Clears the value of `inlineEmbedMedia`. Subsequent reads from it will return its default value.
    public mutating func clearInlineEmbedMedia() {_uniqueStorage()._inlineEmbedMedia = nil}

    public var gifAutoPlay: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._gifAutoPlay ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._gifAutoPlay = newValue}
    }
    /// Returns true if `gifAutoPlay` has been explicitly set.
    public var hasGifAutoPlay: Bool {return _storage._gifAutoPlay != nil}
    /// Clears the value of `gifAutoPlay`. Subsequent reads from it will return its default value.
    public mutating func clearGifAutoPlay() {_uniqueStorage()._gifAutoPlay = nil}

    public var renderEmbeds: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._renderEmbeds ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._renderEmbeds = newValue}
    }
    /// Returns true if `renderEmbeds` has been explicitly set.
    public var hasRenderEmbeds: Bool {return _storage._renderEmbeds != nil}
    /// Clears the value of `renderEmbeds`. Subsequent reads from it will return its default value.
    public mutating func clearRenderEmbeds() {_uniqueStorage()._renderEmbeds = nil}

    public var renderReactions: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._renderReactions ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._renderReactions = newValue}
    }
    /// Returns true if `renderReactions` has been explicitly set.
    public var hasRenderReactions: Bool {return _storage._renderReactions != nil}
    /// Clears the value of `renderReactions`. Subsequent reads from it will return its default value.
    public mutating func clearRenderReactions() {_uniqueStorage()._renderReactions = nil}

    public var animateEmoji: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._animateEmoji ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._animateEmoji = newValue}
    }
    /// Returns true if `animateEmoji` has been explicitly set.
    public var hasAnimateEmoji: Bool {return _storage._animateEmoji != nil}
    /// Clears the value of `animateEmoji`. Subsequent reads from it will return its default value.
    public mutating func clearAnimateEmoji() {_uniqueStorage()._animateEmoji = nil}

    public var animateStickers: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _storage._animateStickers ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_uniqueStorage()._animateStickers = newValue}
    }
    /// Returns true if `animateStickers` has been explicitly set.
    public var hasAnimateStickers: Bool {return _storage._animateStickers != nil}
    /// Clears the value of `animateStickers`. Subsequent reads from it will return its default value.
    public mutating func clearAnimateStickers() {_uniqueStorage()._animateStickers = nil}

    public var enableTtsCommand: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._enableTtsCommand ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._enableTtsCommand = newValue}
    }
    /// Returns true if `enableTtsCommand` has been explicitly set.
    public var hasEnableTtsCommand: Bool {return _storage._enableTtsCommand != nil}
    /// Clears the value of `enableTtsCommand`. Subsequent reads from it will return its default value.
    public mutating func clearEnableTtsCommand() {_uniqueStorage()._enableTtsCommand = nil}

    public var messageDisplayCompact: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._messageDisplayCompact ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._messageDisplayCompact = newValue}
    }
    /// Returns true if `messageDisplayCompact` has been explicitly set.
    public var hasMessageDisplayCompact: Bool {return _storage._messageDisplayCompact != nil}
    /// Clears the value of `messageDisplayCompact`. Subsequent reads from it will return its default value.
    public mutating func clearMessageDisplayCompact() {_uniqueStorage()._messageDisplayCompact = nil}

    public var explicitContentFilter: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _storage._explicitContentFilter ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_uniqueStorage()._explicitContentFilter = newValue}
    }
    /// Returns true if `explicitContentFilter` has been explicitly set.
    public var hasExplicitContentFilter: Bool {return _storage._explicitContentFilter != nil}
    /// Clears the value of `explicitContentFilter`. Subsequent reads from it will return its default value.
    public mutating func clearExplicitContentFilter() {_uniqueStorage()._explicitContentFilter = nil}

    public var viewNsfwGuilds: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._viewNsfwGuilds ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._viewNsfwGuilds = newValue}
    }
    /// Returns true if `viewNsfwGuilds` has been explicitly set.
    public var hasViewNsfwGuilds: Bool {return _storage._viewNsfwGuilds != nil}
    /// Clears the value of `viewNsfwGuilds`. Subsequent reads from it will return its default value.
    public mutating func clearViewNsfwGuilds() {_uniqueStorage()._viewNsfwGuilds = nil}

    public var convertEmoticons: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._convertEmoticons ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._convertEmoticons = newValue}
    }
    /// Returns true if `convertEmoticons` has been explicitly set.
    public var hasConvertEmoticons: Bool {return _storage._convertEmoticons != nil}
    /// Clears the value of `convertEmoticons`. Subsequent reads from it will return its default value.
    public mutating func clearConvertEmoticons() {_uniqueStorage()._convertEmoticons = nil}

    public var expressionSuggestionsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._expressionSuggestionsEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._expressionSuggestionsEnabled = newValue}
    }
    /// Returns true if `expressionSuggestionsEnabled` has been explicitly set.
    public var hasExpressionSuggestionsEnabled: Bool {return _storage._expressionSuggestionsEnabled != nil}
    /// Clears the value of `expressionSuggestionsEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearExpressionSuggestionsEnabled() {_uniqueStorage()._expressionSuggestionsEnabled = nil}

    public var viewNsfwCommands: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._viewNsfwCommands ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._viewNsfwCommands = newValue}
    }
    /// Returns true if `viewNsfwCommands` has been explicitly set.
    public var hasViewNsfwCommands: Bool {return _storage._viewNsfwCommands != nil}
    /// Clears the value of `viewNsfwCommands`. Subsequent reads from it will return its default value.
    public mutating func clearViewNsfwCommands() {_uniqueStorage()._viewNsfwCommands = nil}

    public var useLegacyChatInput: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._useLegacyChatInput ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._useLegacyChatInput = newValue}
    }
    /// Returns true if `useLegacyChatInput` has been explicitly set.
    public var hasUseLegacyChatInput: Bool {return _storage._useLegacyChatInput != nil}
    /// Clears the value of `useLegacyChatInput`. Subsequent reads from it will return its default value.
    public mutating func clearUseLegacyChatInput() {_uniqueStorage()._useLegacyChatInput = nil}

    public var soundboardPickerCollapsedSections: [String] {
      get {return _storage._soundboardPickerCollapsedSections}
      set {_uniqueStorage()._soundboardPickerCollapsedSections = newValue}
    }

    public var dmSpamFilter: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _storage._dmSpamFilter ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_uniqueStorage()._dmSpamFilter = newValue}
    }
    /// Returns true if `dmSpamFilter` has been explicitly set.
    public var hasDmSpamFilter: Bool {return _storage._dmSpamFilter != nil}
    /// Clears the value of `dmSpamFilter`. Subsequent reads from it will return its default value.
    public mutating func clearDmSpamFilter() {_uniqueStorage()._dmSpamFilter = nil}

    public var dmSpamFilterV2: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2 {
      get {return _storage._dmSpamFilterV2}
      set {_uniqueStorage()._dmSpamFilterV2 = newValue}
    }

    public var includeStickersInAutocomplete: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._includeStickersInAutocomplete ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._includeStickersInAutocomplete = newValue}
    }
    /// Returns true if `includeStickersInAutocomplete` has been explicitly set.
    public var hasIncludeStickersInAutocomplete: Bool {return _storage._includeStickersInAutocomplete != nil}
    /// Clears the value of `includeStickersInAutocomplete`. Subsequent reads from it will return its default value.
    public mutating func clearIncludeStickersInAutocomplete() {_uniqueStorage()._includeStickersInAutocomplete = nil}

    public var explicitContentSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings {
      get {return _storage._explicitContentSettings ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings()}
      set {_uniqueStorage()._explicitContentSettings = newValue}
    }
    /// Returns true if `explicitContentSettings` has been explicitly set.
    public var hasExplicitContentSettings: Bool {return _storage._explicitContentSettings != nil}
    /// Clears the value of `explicitContentSettings`. Subsequent reads from it will return its default value.
    public mutating func clearExplicitContentSettings() {_uniqueStorage()._explicitContentSettings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct NotificationSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var showInAppNotifications: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _showInAppNotifications ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_showInAppNotifications = newValue}
    }
    /// Returns true if `showInAppNotifications` has been explicitly set.
    public var hasShowInAppNotifications: Bool {return self._showInAppNotifications != nil}
    /// Clears the value of `showInAppNotifications`. Subsequent reads from it will return its default value.
    public mutating func clearShowInAppNotifications() {self._showInAppNotifications = nil}

    public var notifyFriendsOnGoLive: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _notifyFriendsOnGoLive ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_notifyFriendsOnGoLive = newValue}
    }
    /// Returns true if `notifyFriendsOnGoLive` has been explicitly set.
    public var hasNotifyFriendsOnGoLive: Bool {return self._notifyFriendsOnGoLive != nil}
    /// Clears the value of `notifyFriendsOnGoLive`. Subsequent reads from it will return its default value.
    public mutating func clearNotifyFriendsOnGoLive() {self._notifyFriendsOnGoLive = nil}

    public var notificationCenterAckedBeforeID: UInt64 = 0

    public var enableBurstReactionNotifications: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _enableBurstReactionNotifications ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_enableBurstReactionNotifications = newValue}
    }
    /// Returns true if `enableBurstReactionNotifications` has been explicitly set.
    public var hasEnableBurstReactionNotifications: Bool {return self._enableBurstReactionNotifications != nil}
    /// Clears the value of `enableBurstReactionNotifications`. Subsequent reads from it will return its default value.
    public mutating func clearEnableBurstReactionNotifications() {self._enableBurstReactionNotifications = nil}

    public var quietMode: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _quietMode ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_quietMode = newValue}
    }
    /// Returns true if `quietMode` has been explicitly set.
    public var hasQuietMode: Bool {return self._quietMode != nil}
    /// Clears the value of `quietMode`. Subsequent reads from it will return its default value.
    public mutating func clearQuietMode() {self._quietMode = nil}

    public var focusModeExpiresAtMs: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _showInAppNotifications: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _notifyFriendsOnGoLive: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _enableBurstReactionNotifications: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _quietMode: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct PrivacySettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var allowActivityPartyPrivacyFriends: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._allowActivityPartyPrivacyFriends ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._allowActivityPartyPrivacyFriends = newValue}
    }
    /// Returns true if `allowActivityPartyPrivacyFriends` has been explicitly set.
    public var hasAllowActivityPartyPrivacyFriends: Bool {return _storage._allowActivityPartyPrivacyFriends != nil}
    /// Clears the value of `allowActivityPartyPrivacyFriends`. Subsequent reads from it will return its default value.
    public mutating func clearAllowActivityPartyPrivacyFriends() {_uniqueStorage()._allowActivityPartyPrivacyFriends = nil}

    public var allowActivityPartyPrivacyVoiceChannel: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._allowActivityPartyPrivacyVoiceChannel ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._allowActivityPartyPrivacyVoiceChannel = newValue}
    }
    /// Returns true if `allowActivityPartyPrivacyVoiceChannel` has been explicitly set.
    public var hasAllowActivityPartyPrivacyVoiceChannel: Bool {return _storage._allowActivityPartyPrivacyVoiceChannel != nil}
    /// Clears the value of `allowActivityPartyPrivacyVoiceChannel`. Subsequent reads from it will return its default value.
    public mutating func clearAllowActivityPartyPrivacyVoiceChannel() {_uniqueStorage()._allowActivityPartyPrivacyVoiceChannel = nil}

    public var restrictedGuildIds: [UInt64] {
      get {return _storage._restrictedGuildIds}
      set {_uniqueStorage()._restrictedGuildIds = newValue}
    }

    public var defaultGuildsRestricted: Bool {
      get {return _storage._defaultGuildsRestricted}
      set {_uniqueStorage()._defaultGuildsRestricted = newValue}
    }

    public var allowAccessibilityDetection: Bool {
      get {return _storage._allowAccessibilityDetection}
      set {_uniqueStorage()._allowAccessibilityDetection = newValue}
    }

    public var detectPlatformAccounts: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._detectPlatformAccounts ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._detectPlatformAccounts = newValue}
    }
    /// Returns true if `detectPlatformAccounts` has been explicitly set.
    public var hasDetectPlatformAccounts: Bool {return _storage._detectPlatformAccounts != nil}
    /// Clears the value of `detectPlatformAccounts`. Subsequent reads from it will return its default value.
    public mutating func clearDetectPlatformAccounts() {_uniqueStorage()._detectPlatformAccounts = nil}

    public var passwordless: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._passwordless ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._passwordless = newValue}
    }
    /// Returns true if `passwordless` has been explicitly set.
    public var hasPasswordless: Bool {return _storage._passwordless != nil}
    /// Clears the value of `passwordless`. Subsequent reads from it will return its default value.
    public mutating func clearPasswordless() {_uniqueStorage()._passwordless = nil}

    public var contactSyncEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._contactSyncEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._contactSyncEnabled = newValue}
    }
    /// Returns true if `contactSyncEnabled` has been explicitly set.
    public var hasContactSyncEnabled: Bool {return _storage._contactSyncEnabled != nil}
    /// Clears the value of `contactSyncEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearContactSyncEnabled() {_uniqueStorage()._contactSyncEnabled = nil}

    public var friendSourceFlags: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _storage._friendSourceFlags ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_uniqueStorage()._friendSourceFlags = newValue}
    }
    /// Returns true if `friendSourceFlags` has been explicitly set.
    public var hasFriendSourceFlags: Bool {return _storage._friendSourceFlags != nil}
    /// Clears the value of `friendSourceFlags`. Subsequent reads from it will return its default value.
    public mutating func clearFriendSourceFlags() {_uniqueStorage()._friendSourceFlags = nil}

    public var friendDiscoveryFlags: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _storage._friendDiscoveryFlags ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_uniqueStorage()._friendDiscoveryFlags = newValue}
    }
    /// Returns true if `friendDiscoveryFlags` has been explicitly set.
    public var hasFriendDiscoveryFlags: Bool {return _storage._friendDiscoveryFlags != nil}
    /// Clears the value of `friendDiscoveryFlags`. Subsequent reads from it will return its default value.
    public mutating func clearFriendDiscoveryFlags() {_uniqueStorage()._friendDiscoveryFlags = nil}

    public var activityRestrictedGuildIds: [UInt64] {
      get {return _storage._activityRestrictedGuildIds}
      set {_uniqueStorage()._activityRestrictedGuildIds = newValue}
    }

    public var defaultGuildsActivityRestricted: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault {
      get {return _storage._defaultGuildsActivityRestricted}
      set {_uniqueStorage()._defaultGuildsActivityRestricted = newValue}
    }

    public var activityJoiningRestrictedGuildIds: [UInt64] {
      get {return _storage._activityJoiningRestrictedGuildIds}
      set {_uniqueStorage()._activityJoiningRestrictedGuildIds = newValue}
    }

    public var messageRequestRestrictedGuildIds: [UInt64] {
      get {return _storage._messageRequestRestrictedGuildIds}
      set {_uniqueStorage()._messageRequestRestrictedGuildIds = newValue}
    }

    public var defaultMessageRequestRestricted: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._defaultMessageRequestRestricted ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._defaultMessageRequestRestricted = newValue}
    }
    /// Returns true if `defaultMessageRequestRestricted` has been explicitly set.
    public var hasDefaultMessageRequestRestricted: Bool {return _storage._defaultMessageRequestRestricted != nil}
    /// Clears the value of `defaultMessageRequestRestricted`. Subsequent reads from it will return its default value.
    public mutating func clearDefaultMessageRequestRestricted() {_uniqueStorage()._defaultMessageRequestRestricted = nil}

    public var dropsOptedOut: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._dropsOptedOut ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._dropsOptedOut = newValue}
    }
    /// Returns true if `dropsOptedOut` has been explicitly set.
    public var hasDropsOptedOut: Bool {return _storage._dropsOptedOut != nil}
    /// Clears the value of `dropsOptedOut`. Subsequent reads from it will return its default value.
    public mutating func clearDropsOptedOut() {_uniqueStorage()._dropsOptedOut = nil}

    public var nonSpamRetrainingOptIn: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._nonSpamRetrainingOptIn ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._nonSpamRetrainingOptIn = newValue}
    }
    /// Returns true if `nonSpamRetrainingOptIn` has been explicitly set.
    public var hasNonSpamRetrainingOptIn: Bool {return _storage._nonSpamRetrainingOptIn != nil}
    /// Clears the value of `nonSpamRetrainingOptIn`. Subsequent reads from it will return its default value.
    public mutating func clearNonSpamRetrainingOptIn() {_uniqueStorage()._nonSpamRetrainingOptIn = nil}

    public var familyCenterEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._familyCenterEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._familyCenterEnabled = newValue}
    }
    /// Returns true if `familyCenterEnabled` has been explicitly set.
    public var hasFamilyCenterEnabled: Bool {return _storage._familyCenterEnabled != nil}
    /// Clears the value of `familyCenterEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearFamilyCenterEnabled() {_uniqueStorage()._familyCenterEnabled = nil}

    public var familyCenterEnabledV2: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._familyCenterEnabledV2 ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._familyCenterEnabledV2 = newValue}
    }
    /// Returns true if `familyCenterEnabledV2` has been explicitly set.
    public var hasFamilyCenterEnabledV2: Bool {return _storage._familyCenterEnabledV2 != nil}
    /// Clears the value of `familyCenterEnabledV2`. Subsequent reads from it will return its default value.
    public mutating func clearFamilyCenterEnabledV2() {_uniqueStorage()._familyCenterEnabledV2 = nil}

    public var hideLegacyUsername: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._hideLegacyUsername ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._hideLegacyUsername = newValue}
    }
    /// Returns true if `hideLegacyUsername` has been explicitly set.
    public var hasHideLegacyUsername: Bool {return _storage._hideLegacyUsername != nil}
    /// Clears the value of `hideLegacyUsername`. Subsequent reads from it will return its default value.
    public mutating func clearHideLegacyUsername() {_uniqueStorage()._hideLegacyUsername = nil}

    public var inappropriateConversationWarnings: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._inappropriateConversationWarnings ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._inappropriateConversationWarnings = newValue}
    }
    /// Returns true if `inappropriateConversationWarnings` has been explicitly set.
    public var hasInappropriateConversationWarnings: Bool {return _storage._inappropriateConversationWarnings != nil}
    /// Clears the value of `inappropriateConversationWarnings`. Subsequent reads from it will return its default value.
    public mutating func clearInappropriateConversationWarnings() {_uniqueStorage()._inappropriateConversationWarnings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct DebugSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var rtcPanelShowVoiceStates: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _rtcPanelShowVoiceStates ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_rtcPanelShowVoiceStates = newValue}
    }
    /// Returns true if `rtcPanelShowVoiceStates` has been explicitly set.
    public var hasRtcPanelShowVoiceStates: Bool {return self._rtcPanelShowVoiceStates != nil}
    /// Clears the value of `rtcPanelShowVoiceStates`. Subsequent reads from it will return its default value.
    public mutating func clearRtcPanelShowVoiceStates() {self._rtcPanelShowVoiceStates = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _rtcPanelShowVoiceStates: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct GameLibrarySettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var installShortcutDesktop: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _installShortcutDesktop ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_installShortcutDesktop = newValue}
    }
    /// Returns true if `installShortcutDesktop` has been explicitly set.
    public var hasInstallShortcutDesktop: Bool {return self._installShortcutDesktop != nil}
    /// Clears the value of `installShortcutDesktop`. Subsequent reads from it will return its default value.
    public mutating func clearInstallShortcutDesktop() {self._installShortcutDesktop = nil}

    public var installShortcutStartMenu: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _installShortcutStartMenu ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_installShortcutStartMenu = newValue}
    }
    /// Returns true if `installShortcutStartMenu` has been explicitly set.
    public var hasInstallShortcutStartMenu: Bool {return self._installShortcutStartMenu != nil}
    /// Clears the value of `installShortcutStartMenu`. Subsequent reads from it will return its default value.
    public mutating func clearInstallShortcutStartMenu() {self._installShortcutStartMenu = nil}

    public var disableGamesTab: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _disableGamesTab ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_disableGamesTab = newValue}
    }
    /// Returns true if `disableGamesTab` has been explicitly set.
    public var hasDisableGamesTab: Bool {return self._disableGamesTab != nil}
    /// Clears the value of `disableGamesTab`. Subsequent reads from it will return its default value.
    public mutating func clearDisableGamesTab() {self._disableGamesTab = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _installShortcutDesktop: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _installShortcutStartMenu: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _disableGamesTab: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct CustomStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var text: String = String()

    public var emojiID: UInt64 = 0

    public var emojiName: String = String()

    public var expiresAtMs: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StatusSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var status: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _status ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_status = newValue}
    }
    /// Returns true if `status` has been explicitly set.
    public var hasStatus: Bool {return self._status != nil}
    /// Clears the value of `status`. Subsequent reads from it will return its default value.
    public mutating func clearStatus() {self._status = nil}

    public var customStatus: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus {
      get {return _customStatus ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus()}
      set {_customStatus = newValue}
    }
    /// Returns true if `customStatus` has been explicitly set.
    public var hasCustomStatus: Bool {return self._customStatus != nil}
    /// Clears the value of `customStatus`. Subsequent reads from it will return its default value.
    public mutating func clearCustomStatus() {self._customStatus = nil}

    public var showCurrentGame: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _showCurrentGame ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_showCurrentGame = newValue}
    }
    /// Returns true if `showCurrentGame` has been explicitly set.
    public var hasShowCurrentGame: Bool {return self._showCurrentGame != nil}
    /// Clears the value of `showCurrentGame`. Subsequent reads from it will return its default value.
    public mutating func clearShowCurrentGame() {self._showCurrentGame = nil}

    public var statusExpiresAtMs: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _status: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _customStatus: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus? = nil
    fileprivate var _showCurrentGame: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct LocalizationSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var locale: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _locale ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_locale = newValue}
    }
    /// Returns true if `locale` has been explicitly set.
    public var hasLocale: Bool {return self._locale != nil}
    /// Clears the value of `locale`. Subsequent reads from it will return its default value.
    public mutating func clearLocale() {self._locale = nil}

    public var timezoneOffset: SwiftProtobuf.Google_Protobuf_Int32Value {
      get {return _timezoneOffset ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
      set {_timezoneOffset = newValue}
    }
    /// Returns true if `timezoneOffset` has been explicitly set.
    public var hasTimezoneOffset: Bool {return self._timezoneOffset != nil}
    /// Clears the value of `timezoneOffset`. Subsequent reads from it will return its default value.
    public mutating func clearTimezoneOffset() {self._timezoneOffset = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _locale: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _timezoneOffset: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  }

  public struct ClientThemeSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var backgroundGradientPresetID: SwiftProtobuf.Google_Protobuf_UInt32Value {
      get {return _backgroundGradientPresetID ?? SwiftProtobuf.Google_Protobuf_UInt32Value()}
      set {_backgroundGradientPresetID = newValue}
    }
    /// Returns true if `backgroundGradientPresetID` has been explicitly set.
    public var hasBackgroundGradientPresetID: Bool {return self._backgroundGradientPresetID != nil}
    /// Clears the value of `backgroundGradientPresetID`. Subsequent reads from it will return its default value.
    public mutating func clearBackgroundGradientPresetID() {self._backgroundGradientPresetID = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _backgroundGradientPresetID: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
  }

  public struct AppearanceSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var theme: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Theme = .unset

    public var developerMode: Bool = false

    public var clientThemeSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings {
      get {return _clientThemeSettings ?? DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings()}
      set {_clientThemeSettings = newValue}
    }
    /// Returns true if `clientThemeSettings` has been explicitly set.
    public var hasClientThemeSettings: Bool {return self._clientThemeSettings != nil}
    /// Clears the value of `clientThemeSettings`. Subsequent reads from it will return its default value.
    public mutating func clearClientThemeSettings() {self._clientThemeSettings = nil}

    public var mobileRedesignDisabled: Bool = false

    public var channelListLayout: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _channelListLayout ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_channelListLayout = newValue}
    }
    /// Returns true if `channelListLayout` has been explicitly set.
    public var hasChannelListLayout: Bool {return self._channelListLayout != nil}
    /// Clears the value of `channelListLayout`. Subsequent reads from it will return its default value.
    public mutating func clearChannelListLayout() {self._channelListLayout = nil}

    public var messagePreviews: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _messagePreviews ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_messagePreviews = newValue}
    }
    /// Returns true if `messagePreviews` has been explicitly set.
    public var hasMessagePreviews: Bool {return self._messagePreviews != nil}
    /// Clears the value of `messagePreviews`. Subsequent reads from it will return its default value.
    public mutating func clearMessagePreviews() {self._messagePreviews = nil}

    public var searchResultExactCountEnabled: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _searchResultExactCountEnabled ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_searchResultExactCountEnabled = newValue}
    }
    /// Returns true if `searchResultExactCountEnabled` has been explicitly set.
    public var hasSearchResultExactCountEnabled: Bool {return self._searchResultExactCountEnabled != nil}
    /// Clears the value of `searchResultExactCountEnabled`. Subsequent reads from it will return its default value.
    public mutating func clearSearchResultExactCountEnabled() {self._searchResultExactCountEnabled = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _clientThemeSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings? = nil
    fileprivate var _channelListLayout: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _messagePreviews: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _searchResultExactCountEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct GuildFolder {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var guildIds: [UInt64] = []

    public var id: SwiftProtobuf.Google_Protobuf_Int64Value {
      get {return _id ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    public var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    public mutating func clearID() {self._id = nil}

    public var name: SwiftProtobuf.Google_Protobuf_StringValue {
      get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    public var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    public mutating func clearName() {self._name = nil}

    public var color: SwiftProtobuf.Google_Protobuf_UInt64Value {
      get {return _color ?? SwiftProtobuf.Google_Protobuf_UInt64Value()}
      set {_color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    public var hasColor: Bool {return self._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    public mutating func clearColor() {self._color = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _id: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    fileprivate var _color: SwiftProtobuf.Google_Protobuf_UInt64Value? = nil
  }

  public struct GuildFolders {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var folders: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolder] = []

    public var guildPositions: [UInt64] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct FavoriteChannel {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var nickname: String = String()

    public var type: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannelType = .unsetFavoriteChannelType

    public var position: UInt32 = 0

    public var parentID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Favorites {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var favoriteChannels: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel> = [:]

    public var muted: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct AudioContextSetting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var muted: Bool = false

    public var volume: Float = 0

    public var modifiedAt: UInt64 = 0

    public var soundboardMuted: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct AudioSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var user: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting> = [:]

    public var stream: Dictionary<UInt64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct CommunitiesSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var disableHomeAutoNav: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _disableHomeAutoNav ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_disableHomeAutoNav = newValue}
    }
    /// Returns true if `disableHomeAutoNav` has been explicitly set.
    public var hasDisableHomeAutoNav: Bool {return self._disableHomeAutoNav != nil}
    /// Clears the value of `disableHomeAutoNav`. Subsequent reads from it will return its default value.
    public mutating func clearDisableHomeAutoNav() {self._disableHomeAutoNav = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _disableHomeAutoNav: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct BroadcastSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var allowFriends: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _allowFriends ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_allowFriends = newValue}
    }
    /// Returns true if `allowFriends` has been explicitly set.
    public var hasAllowFriends: Bool {return self._allowFriends != nil}
    /// Clears the value of `allowFriends`. Subsequent reads from it will return its default value.
    public mutating func clearAllowFriends() {self._allowFriends = nil}

    public var allowedGuildIds: [UInt64] = []

    public var allowedUserIds: [UInt64] = []

    public var autoBroadcast: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _autoBroadcast ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_autoBroadcast = newValue}
    }
    /// Returns true if `autoBroadcast` has been explicitly set.
    public var hasAutoBroadcast: Bool {return self._autoBroadcast != nil}
    /// Clears the value of `autoBroadcast`. Subsequent reads from it will return its default value.
    public mutating func clearAutoBroadcast() {self._autoBroadcast = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _allowFriends: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    fileprivate var _autoBroadcast: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public struct ClipsSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var allowVoiceRecording: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _allowVoiceRecording ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_allowVoiceRecording = newValue}
    }
    /// Returns true if `allowVoiceRecording` has been explicitly set.
    public var hasAllowVoiceRecording: Bool {return self._allowVoiceRecording != nil}
    /// Clears the value of `allowVoiceRecording`. Subsequent reads from it will return its default value.
    public mutating func clearAllowVoiceRecording() {self._allowVoiceRecording = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _allowVoiceRecording: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxTab: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxTab] = [
    .unspecified,
    .mentions,
    .unreads,
    .todos,
    .forYou,
    .gameInvites,
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2] = [
    .defaultUnset,
    .disabled,
    .nonFriends,
    .friendsAndNonFriends,
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction] = [
    .unsetExplicitContentRedaction,
    .show,
    .blur,
    .block,
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault] = [
    .off,
    .onForLargeGuilds,
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Theme: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Theme] = [
    .unset,
    .dark,
    .light,
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannelType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannelType] = [
    .unsetFavoriteChannelType,
    .referenceOriginal,
    .category,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxTab: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Theme: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannelType: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolder: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings: @unchecked Sendable {}
extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "discord_protos.discord_users.v1.PreloadedUserSettings"

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreloadedUserSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "versions"),
    2: .same(proto: "inbox"),
    3: .same(proto: "guilds"),
    4: .standard(proto: "user_content"),
    5: .standard(proto: "voice_and_video"),
    6: .standard(proto: "text_and_images"),
    7: .same(proto: "notifications"),
    8: .same(proto: "privacy"),
    9: .same(proto: "debug"),
    10: .standard(proto: "game_library"),
    11: .same(proto: "status"),
    12: .same(proto: "localization"),
    13: .same(proto: "appearance"),
    14: .standard(proto: "guild_folders"),
    15: .same(proto: "favorites"),
    16: .standard(proto: "audio_context_settings"),
    17: .same(proto: "communities"),
    18: .same(proto: "broadcast"),
    19: .same(proto: "clips"),
  ]

  fileprivate class _StorageClass {
    var _versions: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions? = nil
    var _inbox: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings? = nil
    var _guilds: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings? = nil
    var _userContent: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings? = nil
    var _voiceAndVideo: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings? = nil
    var _textAndImages: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings? = nil
    var _notifications: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings? = nil
    var _privacy: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings? = nil
    var _debug: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings? = nil
    var _gameLibrary: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings? = nil
    var _status: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings? = nil
    var _localization: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings? = nil
    var _appearance: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings? = nil
    var _guildFolders: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders? = nil
    var _favorites: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites? = nil
    var _audioContextSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings? = nil
    var _communities: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings? = nil
    var _broadcast: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings? = nil
    var _clips: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _versions = source._versions
      _inbox = source._inbox
      _guilds = source._guilds
      _userContent = source._userContent
      _voiceAndVideo = source._voiceAndVideo
      _textAndImages = source._textAndImages
      _notifications = source._notifications
      _privacy = source._privacy
      _debug = source._debug
      _gameLibrary = source._gameLibrary
      _status = source._status
      _localization = source._localization
      _appearance = source._appearance
      _guildFolders = source._guildFolders
      _favorites = source._favorites
      _audioContextSettings = source._audioContextSettings
      _communities = source._communities
      _broadcast = source._broadcast
      _clips = source._clips
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._versions) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._inbox) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._guilds) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._userContent) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._voiceAndVideo) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._textAndImages) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._notifications) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._privacy) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._debug) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._gameLibrary) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._status) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._localization) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._appearance) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._guildFolders) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._favorites) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._audioContextSettings) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._communities) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._broadcast) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._clips) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._versions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._inbox {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._guilds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._userContent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._voiceAndVideo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._textAndImages {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._notifications {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._privacy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._debug {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._gameLibrary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._localization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._appearance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._guildFolders {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._favorites {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._audioContextSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._communities {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._broadcast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._clips {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._versions != rhs_storage._versions {return false}
        if _storage._inbox != rhs_storage._inbox {return false}
        if _storage._guilds != rhs_storage._guilds {return false}
        if _storage._userContent != rhs_storage._userContent {return false}
        if _storage._voiceAndVideo != rhs_storage._voiceAndVideo {return false}
        if _storage._textAndImages != rhs_storage._textAndImages {return false}
        if _storage._notifications != rhs_storage._notifications {return false}
        if _storage._privacy != rhs_storage._privacy {return false}
        if _storage._debug != rhs_storage._debug {return false}
        if _storage._gameLibrary != rhs_storage._gameLibrary {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._localization != rhs_storage._localization {return false}
        if _storage._appearance != rhs_storage._appearance {return false}
        if _storage._guildFolders != rhs_storage._guildFolders {return false}
        if _storage._favorites != rhs_storage._favorites {return false}
        if _storage._audioContextSettings != rhs_storage._audioContextSettings {return false}
        if _storage._communities != rhs_storage._communities {return false}
        if _storage._broadcast != rhs_storage._broadcast {return false}
        if _storage._clips != rhs_storage._clips {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxTab: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "MENTIONS"),
    2: .same(proto: "UNREADS"),
    3: .same(proto: "TODOS"),
    4: .same(proto: "FOR_YOU"),
    5: .same(proto: "GAME_INVITES"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFAULT_UNSET"),
    1: .same(proto: "DISABLED"),
    2: .same(proto: "NON_FRIENDS"),
    3: .same(proto: "FRIENDS_AND_NON_FRIENDS"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentRedaction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_EXPLICIT_CONTENT_REDACTION"),
    1: .same(proto: "SHOW"),
    2: .same(proto: "BLUR"),
    3: .same(proto: "BLOCK"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "ON_FOR_LARGE_GUILDS"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Theme: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET"),
    1: .same(proto: "DARK"),
    2: .same(proto: "LIGHT"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannelType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSET_FAVORITE_CHANNEL_TYPE"),
    1: .same(proto: "REFERENCE_ORIGINAL"),
    2: .same(proto: "CATEGORY"),
  ]
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".Versions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_version"),
    2: .standard(proto: "server_version"),
    3: .standard(proto: "data_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.clientVersion) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.serverVersion) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.dataVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.clientVersion, fieldNumber: 1)
    }
    if self.serverVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.serverVersion, fieldNumber: 2)
    }
    if self.dataVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Versions) -> Bool {
    if lhs.clientVersion != rhs.clientVersion {return false}
    if lhs.serverVersion != rhs.serverVersion {return false}
    if lhs.dataVersion != rhs.dataVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".InboxSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_tab"),
    2: .standard(proto: "viewed_tutorial"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.currentTab) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.viewedTutorial) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.currentTab != .unspecified {
      try visitor.visitSingularEnumField(value: self.currentTab, fieldNumber: 1)
    }
    if self.viewedTutorial != false {
      try visitor.visitSingularBoolField(value: self.viewedTutorial, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.InboxSettings) -> Bool {
    if lhs.currentTab != rhs.currentTab {return false}
    if lhs.viewedTutorial != rhs.viewedTutorial {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ChannelIconEmoji"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelIconEmoji) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ChannelSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collapsed_in_inbox"),
    2: .standard(proto: "icon_emoji"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.collapsedInInbox) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._iconEmoji) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.collapsedInInbox != false {
      try visitor.visitSingularBoolField(value: self.collapsedInInbox, fieldNumber: 1)
    }
    try { if let v = self._iconEmoji {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings) -> Bool {
    if lhs.collapsedInInbox != rhs.collapsedInInbox {return false}
    if lhs._iconEmoji != rhs._iconEmoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".CustomCallSound"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sound_id"),
    2: .standard(proto: "guild_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self.soundID) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.guildID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.soundID != 0 {
      try visitor.visitSingularFixed64Field(value: self.soundID, fieldNumber: 1)
    }
    if self.guildID != 0 {
      try visitor.visitSingularFixed64Field(value: self.guildID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomCallSound) -> Bool {
    if lhs.soundID != rhs.soundID {return false}
    if lhs.guildID != rhs.guildID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ChannelListSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layout"),
    2: .standard(proto: "message_previews"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._messagePreviews) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._messagePreviews {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelListSettings) -> Bool {
    if lhs._layout != rhs._layout {return false}
    if lhs._messagePreviews != rhs._messagePreviews {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".GuildSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channels"),
    2: .standard(proto: "hub_progress"),
    3: .standard(proto: "guild_onboarding_progress"),
    4: .standard(proto: "guild_recents_dismissed_at"),
    5: .standard(proto: "dismissed_guild_content"),
    6: .standard(proto: "join_sound"),
    7: .standard(proto: "mobile_redesign_channel_list_settings"),
    8: .standard(proto: "disable_raid_alert_push"),
    9: .standard(proto: "disable_raid_alert_nag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings>.self, value: &self.channels) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.hubProgress) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.guildOnboardingProgress) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._guildRecentsDismissedAt) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.dismissedGuildContent) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._joinSound) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._mobileRedesignChannelListSettings) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.disableRaidAlertPush) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.disableRaidAlertNag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.channels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ChannelSettings>.self, value: self.channels, fieldNumber: 1)
    }
    if self.hubProgress != 0 {
      try visitor.visitSingularUInt32Field(value: self.hubProgress, fieldNumber: 2)
    }
    if self.guildOnboardingProgress != 0 {
      try visitor.visitSingularUInt32Field(value: self.guildOnboardingProgress, fieldNumber: 3)
    }
    try { if let v = self._guildRecentsDismissedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.dismissedGuildContent.isEmpty {
      try visitor.visitSingularBytesField(value: self.dismissedGuildContent, fieldNumber: 5)
    }
    try { if let v = self._joinSound {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._mobileRedesignChannelListSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.disableRaidAlertPush != false {
      try visitor.visitSingularBoolField(value: self.disableRaidAlertPush, fieldNumber: 8)
    }
    if self.disableRaidAlertNag != false {
      try visitor.visitSingularBoolField(value: self.disableRaidAlertNag, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings) -> Bool {
    if lhs.channels != rhs.channels {return false}
    if lhs.hubProgress != rhs.hubProgress {return false}
    if lhs.guildOnboardingProgress != rhs.guildOnboardingProgress {return false}
    if lhs._guildRecentsDismissedAt != rhs._guildRecentsDismissedAt {return false}
    if lhs.dismissedGuildContent != rhs.dismissedGuildContent {return false}
    if lhs._joinSound != rhs._joinSound {return false}
    if lhs._mobileRedesignChannelListSettings != rhs._mobileRedesignChannelListSettings {return false}
    if lhs.disableRaidAlertPush != rhs.disableRaidAlertPush {return false}
    if lhs.disableRaidAlertNag != rhs.disableRaidAlertNag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".AllGuildSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "guilds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings>.self, value: &self.guilds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.guilds.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildSettings>.self, value: self.guilds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AllGuildSettings) -> Bool {
    if lhs.guilds != rhs.guilds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".UserContentSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dismissed_contents"),
    2: .standard(proto: "last_dismissed_outbound_promotion_start_date"),
    3: .standard(proto: "premium_tier_0_modal_dismissed_at"),
    4: .standard(proto: "guild_onboarding_upsell_dismissed_at"),
    5: .standard(proto: "safety_user_sentiment_notice_dismissed_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.dismissedContents) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastDismissedOutboundPromotionStartDate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._premiumTier0ModalDismissedAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._guildOnboardingUpsellDismissedAt) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._safetyUserSentimentNoticeDismissedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dismissedContents.isEmpty {
      try visitor.visitSingularBytesField(value: self.dismissedContents, fieldNumber: 1)
    }
    try { if let v = self._lastDismissedOutboundPromotionStartDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._premiumTier0ModalDismissedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._guildOnboardingUpsellDismissedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._safetyUserSentimentNoticeDismissedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.UserContentSettings) -> Bool {
    if lhs.dismissedContents != rhs.dismissedContents {return false}
    if lhs._lastDismissedOutboundPromotionStartDate != rhs._lastDismissedOutboundPromotionStartDate {return false}
    if lhs._premiumTier0ModalDismissedAt != rhs._premiumTier0ModalDismissedAt {return false}
    if lhs._guildOnboardingUpsellDismissedAt != rhs._guildOnboardingUpsellDismissedAt {return false}
    if lhs._safetyUserSentimentNoticeDismissedAt != rhs._safetyUserSentimentNoticeDismissedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".VideoFilterBackgroundBlur"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "use_blur"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.useBlur) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.useBlur != false {
      try visitor.visitSingularBoolField(value: self.useBlur, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterBackgroundBlur) -> Bool {
    if lhs.useBlur != rhs.useBlur {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".VideoFilterAsset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "asset_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.assetHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularFixed64Field(value: self.id, fieldNumber: 1)
    }
    if !self.assetHash.isEmpty {
      try visitor.visitSingularStringField(value: self.assetHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VideoFilterAsset) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.assetHash != rhs.assetHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".SoundboardSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "volume"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.volume) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.volume != 0 {
      try visitor.visitSingularFloatField(value: self.volume, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.SoundboardSettings) -> Bool {
    if lhs.volume != rhs.volume {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".VoiceAndVideoSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blur"),
    2: .standard(proto: "preset_option"),
    3: .standard(proto: "custom_asset"),
    5: .standard(proto: "always_preview_video"),
    6: .standard(proto: "afk_timeout"),
    7: .standard(proto: "stream_notifications_enabled"),
    8: .standard(proto: "native_phone_integration_enabled"),
    9: .standard(proto: "soundboard_settings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._blur) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.presetOption) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._customAsset) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._alwaysPreviewVideo) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._afkTimeout) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._streamNotificationsEnabled) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._nativePhoneIntegrationEnabled) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._soundboardSettings) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._blur {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.presetOption != 0 {
      try visitor.visitSingularUInt32Field(value: self.presetOption, fieldNumber: 2)
    }
    try { if let v = self._customAsset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._alwaysPreviewVideo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._afkTimeout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._streamNotificationsEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._nativePhoneIntegrationEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._soundboardSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.VoiceAndVideoSettings) -> Bool {
    if lhs._blur != rhs._blur {return false}
    if lhs.presetOption != rhs.presetOption {return false}
    if lhs._customAsset != rhs._customAsset {return false}
    if lhs._alwaysPreviewVideo != rhs._alwaysPreviewVideo {return false}
    if lhs._afkTimeout != rhs._afkTimeout {return false}
    if lhs._streamNotificationsEnabled != rhs._streamNotificationsEnabled {return false}
    if lhs._nativePhoneIntegrationEnabled != rhs._nativePhoneIntegrationEnabled {return false}
    if lhs._soundboardSettings != rhs._soundboardSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ExplicitContentSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "explicit_content_guilds"),
    2: .standard(proto: "explicit_content_friend_dm"),
    3: .standard(proto: "explicit_content_non_friend_dm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.explicitContentGuilds) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.explicitContentFriendDm) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.explicitContentNonFriendDm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.explicitContentGuilds != .unsetExplicitContentRedaction {
      try visitor.visitSingularEnumField(value: self.explicitContentGuilds, fieldNumber: 1)
    }
    if self.explicitContentFriendDm != .unsetExplicitContentRedaction {
      try visitor.visitSingularEnumField(value: self.explicitContentFriendDm, fieldNumber: 2)
    }
    if self.explicitContentNonFriendDm != .unsetExplicitContentRedaction {
      try visitor.visitSingularEnumField(value: self.explicitContentNonFriendDm, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings) -> Bool {
    if lhs.explicitContentGuilds != rhs.explicitContentGuilds {return false}
    if lhs.explicitContentFriendDm != rhs.explicitContentFriendDm {return false}
    if lhs.explicitContentNonFriendDm != rhs.explicitContentNonFriendDm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".TextAndImagesSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "diversity_surrogate"),
    2: .standard(proto: "use_rich_chat_input"),
    3: .standard(proto: "use_thread_sidebar"),
    4: .standard(proto: "render_spoilers"),
    5: .standard(proto: "emoji_picker_collapsed_sections"),
    6: .standard(proto: "sticker_picker_collapsed_sections"),
    7: .standard(proto: "view_image_descriptions"),
    8: .standard(proto: "show_command_suggestions"),
    9: .standard(proto: "inline_attachment_media"),
    10: .standard(proto: "inline_embed_media"),
    11: .standard(proto: "gif_auto_play"),
    12: .standard(proto: "render_embeds"),
    13: .standard(proto: "render_reactions"),
    14: .standard(proto: "animate_emoji"),
    15: .standard(proto: "animate_stickers"),
    16: .standard(proto: "enable_tts_command"),
    17: .standard(proto: "message_display_compact"),
    19: .standard(proto: "explicit_content_filter"),
    20: .standard(proto: "view_nsfw_guilds"),
    21: .standard(proto: "convert_emoticons"),
    22: .standard(proto: "expression_suggestions_enabled"),
    23: .standard(proto: "view_nsfw_commands"),
    24: .standard(proto: "use_legacy_chat_input"),
    25: .standard(proto: "soundboard_picker_collapsed_sections"),
    26: .standard(proto: "dm_spam_filter"),
    27: .standard(proto: "dm_spam_filter_v2"),
    28: .standard(proto: "include_stickers_in_autocomplete"),
    29: .standard(proto: "explicit_content_settings"),
  ]

  fileprivate class _StorageClass {
    var _diversitySurrogate: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _useRichChatInput: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _useThreadSidebar: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _renderSpoilers: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _emojiPickerCollapsedSections: [String] = []
    var _stickerPickerCollapsedSections: [String] = []
    var _viewImageDescriptions: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _showCommandSuggestions: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _inlineAttachmentMedia: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _inlineEmbedMedia: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _gifAutoPlay: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _renderEmbeds: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _renderReactions: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _animateEmoji: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _animateStickers: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _enableTtsCommand: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _messageDisplayCompact: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _explicitContentFilter: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _viewNsfwGuilds: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _convertEmoticons: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _expressionSuggestionsEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _viewNsfwCommands: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _useLegacyChatInput: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _soundboardPickerCollapsedSections: [String] = []
    var _dmSpamFilter: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _dmSpamFilterV2: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DmSpamFilterV2 = .defaultUnset
    var _includeStickersInAutocomplete: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _explicitContentSettings: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ExplicitContentSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _diversitySurrogate = source._diversitySurrogate
      _useRichChatInput = source._useRichChatInput
      _useThreadSidebar = source._useThreadSidebar
      _renderSpoilers = source._renderSpoilers
      _emojiPickerCollapsedSections = source._emojiPickerCollapsedSections
      _stickerPickerCollapsedSections = source._stickerPickerCollapsedSections
      _viewImageDescriptions = source._viewImageDescriptions
      _showCommandSuggestions = source._showCommandSuggestions
      _inlineAttachmentMedia = source._inlineAttachmentMedia
      _inlineEmbedMedia = source._inlineEmbedMedia
      _gifAutoPlay = source._gifAutoPlay
      _renderEmbeds = source._renderEmbeds
      _renderReactions = source._renderReactions
      _animateEmoji = source._animateEmoji
      _animateStickers = source._animateStickers
      _enableTtsCommand = source._enableTtsCommand
      _messageDisplayCompact = source._messageDisplayCompact
      _explicitContentFilter = source._explicitContentFilter
      _viewNsfwGuilds = source._viewNsfwGuilds
      _convertEmoticons = source._convertEmoticons
      _expressionSuggestionsEnabled = source._expressionSuggestionsEnabled
      _viewNsfwCommands = source._viewNsfwCommands
      _useLegacyChatInput = source._useLegacyChatInput
      _soundboardPickerCollapsedSections = source._soundboardPickerCollapsedSections
      _dmSpamFilter = source._dmSpamFilter
      _dmSpamFilterV2 = source._dmSpamFilterV2
      _includeStickersInAutocomplete = source._includeStickersInAutocomplete
      _explicitContentSettings = source._explicitContentSettings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._diversitySurrogate) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._useRichChatInput) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._useThreadSidebar) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._renderSpoilers) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._emojiPickerCollapsedSections) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._stickerPickerCollapsedSections) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._viewImageDescriptions) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._showCommandSuggestions) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._inlineAttachmentMedia) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._inlineEmbedMedia) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._gifAutoPlay) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._renderEmbeds) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._renderReactions) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._animateEmoji) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._animateStickers) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._enableTtsCommand) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._messageDisplayCompact) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._explicitContentFilter) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._viewNsfwGuilds) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._convertEmoticons) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._expressionSuggestionsEnabled) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._viewNsfwCommands) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._useLegacyChatInput) }()
        case 25: try { try decoder.decodeRepeatedStringField(value: &_storage._soundboardPickerCollapsedSections) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._dmSpamFilter) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._dmSpamFilterV2) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._includeStickersInAutocomplete) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._explicitContentSettings) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._diversitySurrogate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._useRichChatInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._useThreadSidebar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._renderSpoilers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._emojiPickerCollapsedSections.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._emojiPickerCollapsedSections, fieldNumber: 5)
      }
      if !_storage._stickerPickerCollapsedSections.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._stickerPickerCollapsedSections, fieldNumber: 6)
      }
      try { if let v = _storage._viewImageDescriptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._showCommandSuggestions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._inlineAttachmentMedia {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._inlineEmbedMedia {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._gifAutoPlay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._renderEmbeds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._renderReactions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._animateEmoji {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._animateStickers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._enableTtsCommand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._messageDisplayCompact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._explicitContentFilter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._viewNsfwGuilds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._convertEmoticons {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._expressionSuggestionsEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._viewNsfwCommands {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._useLegacyChatInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      if !_storage._soundboardPickerCollapsedSections.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._soundboardPickerCollapsedSections, fieldNumber: 25)
      }
      try { if let v = _storage._dmSpamFilter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      if _storage._dmSpamFilterV2 != .defaultUnset {
        try visitor.visitSingularEnumField(value: _storage._dmSpamFilterV2, fieldNumber: 27)
      }
      try { if let v = _storage._includeStickersInAutocomplete {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._explicitContentSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.TextAndImagesSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._diversitySurrogate != rhs_storage._diversitySurrogate {return false}
        if _storage._useRichChatInput != rhs_storage._useRichChatInput {return false}
        if _storage._useThreadSidebar != rhs_storage._useThreadSidebar {return false}
        if _storage._renderSpoilers != rhs_storage._renderSpoilers {return false}
        if _storage._emojiPickerCollapsedSections != rhs_storage._emojiPickerCollapsedSections {return false}
        if _storage._stickerPickerCollapsedSections != rhs_storage._stickerPickerCollapsedSections {return false}
        if _storage._viewImageDescriptions != rhs_storage._viewImageDescriptions {return false}
        if _storage._showCommandSuggestions != rhs_storage._showCommandSuggestions {return false}
        if _storage._inlineAttachmentMedia != rhs_storage._inlineAttachmentMedia {return false}
        if _storage._inlineEmbedMedia != rhs_storage._inlineEmbedMedia {return false}
        if _storage._gifAutoPlay != rhs_storage._gifAutoPlay {return false}
        if _storage._renderEmbeds != rhs_storage._renderEmbeds {return false}
        if _storage._renderReactions != rhs_storage._renderReactions {return false}
        if _storage._animateEmoji != rhs_storage._animateEmoji {return false}
        if _storage._animateStickers != rhs_storage._animateStickers {return false}
        if _storage._enableTtsCommand != rhs_storage._enableTtsCommand {return false}
        if _storage._messageDisplayCompact != rhs_storage._messageDisplayCompact {return false}
        if _storage._explicitContentFilter != rhs_storage._explicitContentFilter {return false}
        if _storage._viewNsfwGuilds != rhs_storage._viewNsfwGuilds {return false}
        if _storage._convertEmoticons != rhs_storage._convertEmoticons {return false}
        if _storage._expressionSuggestionsEnabled != rhs_storage._expressionSuggestionsEnabled {return false}
        if _storage._viewNsfwCommands != rhs_storage._viewNsfwCommands {return false}
        if _storage._useLegacyChatInput != rhs_storage._useLegacyChatInput {return false}
        if _storage._soundboardPickerCollapsedSections != rhs_storage._soundboardPickerCollapsedSections {return false}
        if _storage._dmSpamFilter != rhs_storage._dmSpamFilter {return false}
        if _storage._dmSpamFilterV2 != rhs_storage._dmSpamFilterV2 {return false}
        if _storage._includeStickersInAutocomplete != rhs_storage._includeStickersInAutocomplete {return false}
        if _storage._explicitContentSettings != rhs_storage._explicitContentSettings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".NotificationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "show_in_app_notifications"),
    2: .standard(proto: "notify_friends_on_go_live"),
    3: .standard(proto: "notification_center_acked_before_id"),
    4: .standard(proto: "enable_burst_reaction_notifications"),
    5: .standard(proto: "quiet_mode"),
    6: .standard(proto: "focus_mode_expires_at_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._showInAppNotifications) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._notifyFriendsOnGoLive) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self.notificationCenterAckedBeforeID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._enableBurstReactionNotifications) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._quietMode) }()
      case 6: try { try decoder.decodeSingularFixed64Field(value: &self.focusModeExpiresAtMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._showInAppNotifications {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._notifyFriendsOnGoLive {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.notificationCenterAckedBeforeID != 0 {
      try visitor.visitSingularFixed64Field(value: self.notificationCenterAckedBeforeID, fieldNumber: 3)
    }
    try { if let v = self._enableBurstReactionNotifications {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._quietMode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.focusModeExpiresAtMs != 0 {
      try visitor.visitSingularFixed64Field(value: self.focusModeExpiresAtMs, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.NotificationSettings) -> Bool {
    if lhs._showInAppNotifications != rhs._showInAppNotifications {return false}
    if lhs._notifyFriendsOnGoLive != rhs._notifyFriendsOnGoLive {return false}
    if lhs.notificationCenterAckedBeforeID != rhs.notificationCenterAckedBeforeID {return false}
    if lhs._enableBurstReactionNotifications != rhs._enableBurstReactionNotifications {return false}
    if lhs._quietMode != rhs._quietMode {return false}
    if lhs.focusModeExpiresAtMs != rhs.focusModeExpiresAtMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".PrivacySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_activity_party_privacy_friends"),
    2: .standard(proto: "allow_activity_party_privacy_voice_channel"),
    3: .standard(proto: "restricted_guild_ids"),
    4: .standard(proto: "default_guilds_restricted"),
    7: .standard(proto: "allow_accessibility_detection"),
    8: .standard(proto: "detect_platform_accounts"),
    9: .same(proto: "passwordless"),
    10: .standard(proto: "contact_sync_enabled"),
    11: .standard(proto: "friend_source_flags"),
    12: .standard(proto: "friend_discovery_flags"),
    13: .standard(proto: "activity_restricted_guild_ids"),
    14: .standard(proto: "default_guilds_activity_restricted"),
    15: .standard(proto: "activity_joining_restricted_guild_ids"),
    16: .standard(proto: "message_request_restricted_guild_ids"),
    17: .standard(proto: "default_message_request_restricted"),
    18: .standard(proto: "drops_opted_out"),
    19: .standard(proto: "non_spam_retraining_opt_in"),
    20: .standard(proto: "family_center_enabled"),
    21: .standard(proto: "family_center_enabled_v2"),
    22: .standard(proto: "hide_legacy_username"),
    23: .standard(proto: "inappropriate_conversation_warnings"),
  ]

  fileprivate class _StorageClass {
    var _allowActivityPartyPrivacyFriends: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _allowActivityPartyPrivacyVoiceChannel: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _restrictedGuildIds: [UInt64] = []
    var _defaultGuildsRestricted: Bool = false
    var _allowAccessibilityDetection: Bool = false
    var _detectPlatformAccounts: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _passwordless: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _contactSyncEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _friendSourceFlags: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _friendDiscoveryFlags: SwiftProtobuf.Google_Protobuf_UInt32Value? = nil
    var _activityRestrictedGuildIds: [UInt64] = []
    var _defaultGuildsActivityRestricted: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildActivityStatusRestrictionDefault = .off
    var _activityJoiningRestrictedGuildIds: [UInt64] = []
    var _messageRequestRestrictedGuildIds: [UInt64] = []
    var _defaultMessageRequestRestricted: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _dropsOptedOut: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _nonSpamRetrainingOptIn: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _familyCenterEnabled: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _familyCenterEnabledV2: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _hideLegacyUsername: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _inappropriateConversationWarnings: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _allowActivityPartyPrivacyFriends = source._allowActivityPartyPrivacyFriends
      _allowActivityPartyPrivacyVoiceChannel = source._allowActivityPartyPrivacyVoiceChannel
      _restrictedGuildIds = source._restrictedGuildIds
      _defaultGuildsRestricted = source._defaultGuildsRestricted
      _allowAccessibilityDetection = source._allowAccessibilityDetection
      _detectPlatformAccounts = source._detectPlatformAccounts
      _passwordless = source._passwordless
      _contactSyncEnabled = source._contactSyncEnabled
      _friendSourceFlags = source._friendSourceFlags
      _friendDiscoveryFlags = source._friendDiscoveryFlags
      _activityRestrictedGuildIds = source._activityRestrictedGuildIds
      _defaultGuildsActivityRestricted = source._defaultGuildsActivityRestricted
      _activityJoiningRestrictedGuildIds = source._activityJoiningRestrictedGuildIds
      _messageRequestRestrictedGuildIds = source._messageRequestRestrictedGuildIds
      _defaultMessageRequestRestricted = source._defaultMessageRequestRestricted
      _dropsOptedOut = source._dropsOptedOut
      _nonSpamRetrainingOptIn = source._nonSpamRetrainingOptIn
      _familyCenterEnabled = source._familyCenterEnabled
      _familyCenterEnabledV2 = source._familyCenterEnabledV2
      _hideLegacyUsername = source._hideLegacyUsername
      _inappropriateConversationWarnings = source._inappropriateConversationWarnings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._allowActivityPartyPrivacyFriends) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._allowActivityPartyPrivacyVoiceChannel) }()
        case 3: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._restrictedGuildIds) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._defaultGuildsRestricted) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._allowAccessibilityDetection) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._detectPlatformAccounts) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._passwordless) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._contactSyncEnabled) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._friendSourceFlags) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._friendDiscoveryFlags) }()
        case 13: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._activityRestrictedGuildIds) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._defaultGuildsActivityRestricted) }()
        case 15: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._activityJoiningRestrictedGuildIds) }()
        case 16: try { try decoder.decodeRepeatedFixed64Field(value: &_storage._messageRequestRestrictedGuildIds) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._defaultMessageRequestRestricted) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._dropsOptedOut) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._nonSpamRetrainingOptIn) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._familyCenterEnabled) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._familyCenterEnabledV2) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._hideLegacyUsername) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._inappropriateConversationWarnings) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._allowActivityPartyPrivacyFriends {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._allowActivityPartyPrivacyVoiceChannel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._restrictedGuildIds.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._restrictedGuildIds, fieldNumber: 3)
      }
      if _storage._defaultGuildsRestricted != false {
        try visitor.visitSingularBoolField(value: _storage._defaultGuildsRestricted, fieldNumber: 4)
      }
      if _storage._allowAccessibilityDetection != false {
        try visitor.visitSingularBoolField(value: _storage._allowAccessibilityDetection, fieldNumber: 7)
      }
      try { if let v = _storage._detectPlatformAccounts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._passwordless {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._contactSyncEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._friendSourceFlags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._friendDiscoveryFlags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._activityRestrictedGuildIds.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._activityRestrictedGuildIds, fieldNumber: 13)
      }
      if _storage._defaultGuildsActivityRestricted != .off {
        try visitor.visitSingularEnumField(value: _storage._defaultGuildsActivityRestricted, fieldNumber: 14)
      }
      if !_storage._activityJoiningRestrictedGuildIds.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._activityJoiningRestrictedGuildIds, fieldNumber: 15)
      }
      if !_storage._messageRequestRestrictedGuildIds.isEmpty {
        try visitor.visitPackedFixed64Field(value: _storage._messageRequestRestrictedGuildIds, fieldNumber: 16)
      }
      try { if let v = _storage._defaultMessageRequestRestricted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._dropsOptedOut {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._nonSpamRetrainingOptIn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._familyCenterEnabled {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._familyCenterEnabledV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._hideLegacyUsername {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._inappropriateConversationWarnings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.PrivacySettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._allowActivityPartyPrivacyFriends != rhs_storage._allowActivityPartyPrivacyFriends {return false}
        if _storage._allowActivityPartyPrivacyVoiceChannel != rhs_storage._allowActivityPartyPrivacyVoiceChannel {return false}
        if _storage._restrictedGuildIds != rhs_storage._restrictedGuildIds {return false}
        if _storage._defaultGuildsRestricted != rhs_storage._defaultGuildsRestricted {return false}
        if _storage._allowAccessibilityDetection != rhs_storage._allowAccessibilityDetection {return false}
        if _storage._detectPlatformAccounts != rhs_storage._detectPlatformAccounts {return false}
        if _storage._passwordless != rhs_storage._passwordless {return false}
        if _storage._contactSyncEnabled != rhs_storage._contactSyncEnabled {return false}
        if _storage._friendSourceFlags != rhs_storage._friendSourceFlags {return false}
        if _storage._friendDiscoveryFlags != rhs_storage._friendDiscoveryFlags {return false}
        if _storage._activityRestrictedGuildIds != rhs_storage._activityRestrictedGuildIds {return false}
        if _storage._defaultGuildsActivityRestricted != rhs_storage._defaultGuildsActivityRestricted {return false}
        if _storage._activityJoiningRestrictedGuildIds != rhs_storage._activityJoiningRestrictedGuildIds {return false}
        if _storage._messageRequestRestrictedGuildIds != rhs_storage._messageRequestRestrictedGuildIds {return false}
        if _storage._defaultMessageRequestRestricted != rhs_storage._defaultMessageRequestRestricted {return false}
        if _storage._dropsOptedOut != rhs_storage._dropsOptedOut {return false}
        if _storage._nonSpamRetrainingOptIn != rhs_storage._nonSpamRetrainingOptIn {return false}
        if _storage._familyCenterEnabled != rhs_storage._familyCenterEnabled {return false}
        if _storage._familyCenterEnabledV2 != rhs_storage._familyCenterEnabledV2 {return false}
        if _storage._hideLegacyUsername != rhs_storage._hideLegacyUsername {return false}
        if _storage._inappropriateConversationWarnings != rhs_storage._inappropriateConversationWarnings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".DebugSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rtc_panel_show_voice_states"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rtcPanelShowVoiceStates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rtcPanelShowVoiceStates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.DebugSettings) -> Bool {
    if lhs._rtcPanelShowVoiceStates != rhs._rtcPanelShowVoiceStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".GameLibrarySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "install_shortcut_desktop"),
    2: .standard(proto: "install_shortcut_start_menu"),
    3: .standard(proto: "disable_games_tab"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._installShortcutDesktop) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._installShortcutStartMenu) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._disableGamesTab) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._installShortcutDesktop {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._installShortcutStartMenu {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._disableGamesTab {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GameLibrarySettings) -> Bool {
    if lhs._installShortcutDesktop != rhs._installShortcutDesktop {return false}
    if lhs._installShortcutStartMenu != rhs._installShortcutStartMenu {return false}
    if lhs._disableGamesTab != rhs._disableGamesTab {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".CustomStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "emoji_id"),
    3: .standard(proto: "emoji_name"),
    4: .standard(proto: "expires_at_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self.emojiID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.emojiName) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self.expiresAtMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.emojiID != 0 {
      try visitor.visitSingularFixed64Field(value: self.emojiID, fieldNumber: 2)
    }
    if !self.emojiName.isEmpty {
      try visitor.visitSingularStringField(value: self.emojiName, fieldNumber: 3)
    }
    if self.expiresAtMs != 0 {
      try visitor.visitSingularFixed64Field(value: self.expiresAtMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CustomStatus) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.emojiID != rhs.emojiID {return false}
    if lhs.emojiName != rhs.emojiName {return false}
    if lhs.expiresAtMs != rhs.expiresAtMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".StatusSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "custom_status"),
    3: .standard(proto: "show_current_game"),
    4: .standard(proto: "status_expires_at_ms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._customStatus) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._showCurrentGame) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self.statusExpiresAtMs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._customStatus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._showCurrentGame {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.statusExpiresAtMs != 0 {
      try visitor.visitSingularFixed64Field(value: self.statusExpiresAtMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.StatusSettings) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._customStatus != rhs._customStatus {return false}
    if lhs._showCurrentGame != rhs._showCurrentGame {return false}
    if lhs.statusExpiresAtMs != rhs.statusExpiresAtMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".LocalizationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locale"),
    2: .standard(proto: "timezone_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._locale) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timezoneOffset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._locale {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timezoneOffset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.LocalizationSettings) -> Bool {
    if lhs._locale != rhs._locale {return false}
    if lhs._timezoneOffset != rhs._timezoneOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ClientThemeSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "background_gradient_preset_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._backgroundGradientPresetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._backgroundGradientPresetID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClientThemeSettings) -> Bool {
    if lhs._backgroundGradientPresetID != rhs._backgroundGradientPresetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".AppearanceSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "theme"),
    2: .standard(proto: "developer_mode"),
    3: .standard(proto: "client_theme_settings"),
    4: .standard(proto: "mobile_redesign_disabled"),
    6: .standard(proto: "channel_list_layout"),
    7: .standard(proto: "message_previews"),
    8: .standard(proto: "search_result_exact_count_enabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.theme) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.developerMode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._clientThemeSettings) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.mobileRedesignDisabled) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._channelListLayout) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._messagePreviews) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._searchResultExactCountEnabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.theme != .unset {
      try visitor.visitSingularEnumField(value: self.theme, fieldNumber: 1)
    }
    if self.developerMode != false {
      try visitor.visitSingularBoolField(value: self.developerMode, fieldNumber: 2)
    }
    try { if let v = self._clientThemeSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.mobileRedesignDisabled != false {
      try visitor.visitSingularBoolField(value: self.mobileRedesignDisabled, fieldNumber: 4)
    }
    try { if let v = self._channelListLayout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._messagePreviews {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._searchResultExactCountEnabled {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AppearanceSettings) -> Bool {
    if lhs.theme != rhs.theme {return false}
    if lhs.developerMode != rhs.developerMode {return false}
    if lhs._clientThemeSettings != rhs._clientThemeSettings {return false}
    if lhs.mobileRedesignDisabled != rhs.mobileRedesignDisabled {return false}
    if lhs._channelListLayout != rhs._channelListLayout {return false}
    if lhs._messagePreviews != rhs._messagePreviews {return false}
    if lhs._searchResultExactCountEnabled != rhs._searchResultExactCountEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".GuildFolder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "guild_ids"),
    2: .same(proto: "id"),
    3: .same(proto: "name"),
    4: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFixed64Field(value: &self.guildIds) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.guildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.guildIds, fieldNumber: 1)
    }
    try { if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolder, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolder) -> Bool {
    if lhs.guildIds != rhs.guildIds {return false}
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".GuildFolders"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "folders"),
    2: .standard(proto: "guild_positions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.folders) }()
      case 2: try { try decoder.decodeRepeatedFixed64Field(value: &self.guildPositions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.folders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.folders, fieldNumber: 1)
    }
    if !self.guildPositions.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.guildPositions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.GuildFolders) -> Bool {
    if lhs.folders != rhs.folders {return false}
    if lhs.guildPositions != rhs.guildPositions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".FavoriteChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nickname"),
    2: .same(proto: "type"),
    3: .same(proto: "position"),
    4: .standard(proto: "parent_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nickname) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.position) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self.parentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nickname.isEmpty {
      try visitor.visitSingularStringField(value: self.nickname, fieldNumber: 1)
    }
    if self.type != .unsetFavoriteChannelType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.position != 0 {
      try visitor.visitSingularUInt32Field(value: self.position, fieldNumber: 3)
    }
    if self.parentID != 0 {
      try visitor.visitSingularFixed64Field(value: self.parentID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel) -> Bool {
    if lhs.nickname != rhs.nickname {return false}
    if lhs.type != rhs.type {return false}
    if lhs.position != rhs.position {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".Favorites"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "favorite_channels"),
    2: .same(proto: "muted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel>.self, value: &self.favoriteChannels) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.favoriteChannels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.FavoriteChannel>.self, value: self.favoriteChannels, fieldNumber: 1)
    }
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.Favorites) -> Bool {
    if lhs.favoriteChannels != rhs.favoriteChannels {return false}
    if lhs.muted != rhs.muted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".AudioContextSetting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "muted"),
    2: .same(proto: "volume"),
    3: .standard(proto: "modified_at"),
    4: .standard(proto: "soundboard_muted"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.volume) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self.modifiedAt) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.soundboardMuted) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.muted != false {
      try visitor.visitSingularBoolField(value: self.muted, fieldNumber: 1)
    }
    if self.volume != 0 {
      try visitor.visitSingularFloatField(value: self.volume, fieldNumber: 2)
    }
    if self.modifiedAt != 0 {
      try visitor.visitSingularFixed64Field(value: self.modifiedAt, fieldNumber: 3)
    }
    if self.soundboardMuted != false {
      try visitor.visitSingularBoolField(value: self.soundboardMuted, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting) -> Bool {
    if lhs.muted != rhs.muted {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.modifiedAt != rhs.modifiedAt {return false}
    if lhs.soundboardMuted != rhs.soundboardMuted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".AudioSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "stream"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting>.self, value: &self.user) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting>.self, value: &self.stream) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.user.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting>.self, value: self.user, fieldNumber: 1)
    }
    if !self.stream.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufFixed64,DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioContextSetting>.self, value: self.stream, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.AudioSettings) -> Bool {
    if lhs.user != rhs.user {return false}
    if lhs.stream != rhs.stream {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".CommunitiesSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "disable_home_auto_nav"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._disableHomeAutoNav) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._disableHomeAutoNav {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.CommunitiesSettings) -> Bool {
    if lhs._disableHomeAutoNav != rhs._disableHomeAutoNav {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".BroadcastSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_friends"),
    2: .standard(proto: "allowed_guild_ids"),
    3: .standard(proto: "allowed_user_ids"),
    4: .standard(proto: "auto_broadcast"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._allowFriends) }()
      case 2: try { try decoder.decodeRepeatedFixed64Field(value: &self.allowedGuildIds) }()
      case 3: try { try decoder.decodeRepeatedFixed64Field(value: &self.allowedUserIds) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._autoBroadcast) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._allowFriends {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.allowedGuildIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.allowedGuildIds, fieldNumber: 2)
    }
    if !self.allowedUserIds.isEmpty {
      try visitor.visitPackedFixed64Field(value: self.allowedUserIds, fieldNumber: 3)
    }
    try { if let v = self._autoBroadcast {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.BroadcastSettings) -> Bool {
    if lhs._allowFriends != rhs._allowFriends {return false}
    if lhs.allowedGuildIds != rhs.allowedGuildIds {return false}
    if lhs.allowedUserIds != rhs.allowedUserIds {return false}
    if lhs._autoBroadcast != rhs._autoBroadcast {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.protoMessageName + ".ClipsSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allow_voice_recording"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._allowVoiceRecording) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._allowVoiceRecording {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings, rhs: DiscordProtos_DiscordUsers_V1_PreloadedUserSettings_PreloadedUserSettings.ClipsSettings) -> Bool {
    if lhs._allowVoiceRecording != rhs._allowVoiceRecording {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
